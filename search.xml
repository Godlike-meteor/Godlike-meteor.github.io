<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[你不得不知道的Git命令]]></title>
      <url>/2017/07/12/%E4%BD%A0%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>GitHub是一个通过Git进行版本控制的软件源代码托管服务，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。</p>
<p>GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，但是付费账户还可以创建私有的代码仓库。根据在2009年的Git用户调查，GitHub是最流行的Git访问站点。除了允许个人和组织创建和访问保管中的代码以外，它也提供了一些方便社会化共同软件开发的功能，即一般人口中的社区功能，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动和bug提出评论等。GitHub也提供了图表功能，用于概观显示开发者们怎样在代码库上工作以及软件的开发活跃程度。</p>
<p>经过几天的博客搭建，终于搭好了自己的博客，在这个过程中我也发现有一些Git指令不是特别会写，所以查阅了很多资料，总结在这里，也作为一些参考。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></div><div class="line">git config --global user.name <span class="string">"xxx"</span>                       <span class="comment"># 配置用户名</span></div><div class="line">git config --global user.email <span class="string">"xxx@xxx.com"</span>              <span class="comment"># 配置邮件</span></div><div class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></div><div class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></div><div class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></div><div class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></div><div class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></div><div class="line">git commit -m <span class="string">'xxx'</span>                                       <span class="comment"># 提交</span></div><div class="line">git commit --amend -m <span class="string">'xxx'</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></div><div class="line">git commit -am <span class="string">'xxx'</span>                                      <span class="comment"># 将add和commit合为一步</span></div><div class="line">git rm xxx                                                <span class="comment"># 删除index中的文件</span></div><div class="line">git rm -r *                                               <span class="comment"># 递归删除</span></div><div class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 显示提交日志</span></div><div class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></div><div class="line">git <span class="built_in">log</span> -5</div><div class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></div><div class="line">git <span class="built_in">log</span> -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></div><div class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></div><div class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></div><div class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></div><div class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></div><div class="line">git tag -a v2.0 -m <span class="string">'xxx'</span>                                  <span class="comment"># 增加v2.0的tag</span></div><div class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></div><div class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></div><div class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></div><div class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></div><div class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></div><div class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></div><div class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></div><div class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></div><div class="line">git branch                                                <span class="comment"># 显示本地分支</span></div><div class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></div><div class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></div><div class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></div><div class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></div><div class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></div><div class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></div><div class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></div><div class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></div><div class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></div><div class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></div><div class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></div><div class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></div><div class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></div><div class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></div><div class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></div><div class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></div><div class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></div><div class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></div><div class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></div><div class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></div><div class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></div><div class="line">git mv README README2                                     <span class="comment"># 重命名文件README为README2</span></div><div class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></div><div class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></div><div class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></div><div class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></div><div class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></div><div class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></div><div class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></div><div class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></div><div class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></div><div class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">'%h %s'</span> --graph                   <span class="comment"># 图示提交日志</span></div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></div><div class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></div><div class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></div><div class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></div><div class="line">git grep <span class="string">"delete from"</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></div><div class="line">git grep -e <span class="string">'#define'</span> --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 单向链表]]></title>
      <url>/2017/07/11/JavaScript%20%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>欢迎大家来到我的博客，这是我的第一篇技术性博客，今天给大家讲解有关于JavaScript单向链表的建立和操作过程，希望大家能够从中收获到知识，我也会定期更新自己所学的知识到这个博客上。</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="新建一个链表"><a href="#新建一个链表" class="headerlink" title="新建一个链表"></a>新建一个链表</h3><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。JavaScript中的单向链表也是如此，建立一个链表我们首先先要建立一个最基础的属性：节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为JavaScript是一种弱类型的语言，所以使用函数定义节点，而next即为节点的指针，接下来就要创建我们的链表了，但是光有链表还不够，还需要一些链表的操作，添加节点的查找、插入、显示和删除四个功能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);       </div><div class="line">    this.find = find;                   </div><div class="line">    this.insert = insert;               </div><div class="line">    this.display = display;             </div><div class="line">    this.findPrevious = findPrevious;   </div><div class="line">    this.remove = remove;               </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个链表的基本结构就建好了，接下来我们需要通过一系列的功能测试这个链表</p>
<h3 id="实现链表的查找功能"><a href="#实现链表的查找功能" class="headerlink" title="实现链表的查找功能"></a>实现链表的查找功能</h3><p>尽管已经建立出一个链表，但是因为这个链表只包含一个头节点，所以我们要插入自己想要的数据，但是如何确定插入元素在什么位置上呢？这就需要我们调用链表的查找函数 find() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var findNode = this.head;           </div><div class="line">    <span class="keyword">while</span>(findNode.element!=item)&#123;      </div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找函数的参数就是链表的内容，即element。</p>
<h3 id="实现链表的插入功能"><a href="#实现链表的插入功能" class="headerlink" title="实现链表的插入功能"></a>实现链表的插入功能</h3><p>查找的目的不仅仅是创建一个链表，你也可以通过查找函数确定链表内数据是否正确，接下来需要实现的就是我们的插入函数 insert() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement);  </div><div class="line">    var beforeNode = this.find(item);    </div><div class="line">    newNode.next = beforeNode.next;      </div><div class="line">    beforeNode.next = newNode;           </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>newElement是你想要插入节点的内容，而item是你想要插入节点的前一个节点的内容。</p>
<h3 id="实现链表的显示功能"><a href="#实现链表的显示功能" class="headerlink" title="实现链表的显示功能"></a>实现链表的显示功能</h3><p>通过查找前一个节点，就可以实现在指定节点后插入节点的操作了。接下来检验我们的函数是否可用，就需要调用我们的显示函数 display() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     </div><div class="line">        console.log(findNode.next.element);</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>display() 需要在Google console 中调用，通过调用你会发现建立了一个完整的链表结构，而且可以随心所欲的更改链表的数据了。</p>
<h3 id="实现链表的删除功能"><a href="#实现链表的删除功能" class="headerlink" title="实现链表的删除功能"></a>实现链表的删除功能</h3><p>链表的删除功能其实就是将链表的指针指向下下个节点上，因为浏览器的缓存特性，浏览器会自动清除无用的节点，这样便实现了链表节点的删除，但在删除节点之前我们需要找到删除的节点的前一个节点，然后改变指针就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(findNode.next.element!=item)&#123;  </div><div class="line">        findNode =findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到前一个节点，就可以实现我们的删除操作了，删除需要 remove() 函数实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var findNode = this.findPrevious(item);  </div><div class="line">    findNode.next = findNode.next.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们可以使用 display() 函数调用，就可以发现已经可以实现功能了，这是最基本的链表操作，接下来还会推出有关双向链表等博客，谢谢大家支持！</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生若只如初见]]></title>
      <url>/2017/07/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>“人生若只如初见”，清代词人纳兰性德的这句诗词几乎无人不念，无人不爱，这句诗词无论在哪里出现，哪里游走，它都是那么的入心入眼，带给人无限绕指柔的情愫。毋庸置疑，“人生若只如初见”这飘渺出尘的七个字一定是惊艳了无数人的时光，也温柔了无数人的岁月。</p>
<p>红尘太多美丽的初见，宛若人间四月天，它不仅有花开的嫣然，也有花香的萦绕；它不仅有诗情的浮动，也有诗意的摇曳。只是，如果人生只如初见，那么人间也就不会有《钗头凤》的千年绝唱；如果人生只如初见，那么世上也就不会有梁祝化蝶飞的千古传奇；如果人生只如初见，那么凡尘也就不会有雷峰塔的千年喟叹。</p>
<p>行走在光阴里的人，谁不对初见怀揣一份美好向往和期待？谁不对初见心存一份眷恋和不舍？假如人生是一场途经，初见一定是人生路上最美的绽放。人生在世，不管你是青丝如云，还是白发如霜，当你念及“人生若只如初见”时，你的嘴角一定会不由自主地泛起一抹淡淡的笑意，你的内心一定会情不自禁地漾开一弯涟漪。</p>
<p>一次萍聚，让多少午夜梦回，衣袖盈香？一次邂逅，让多少暗香浮动，刹那芳华？一份爱情，从开始到结束，初见，永远是最美丽的风景；一个故事，从上演到谢幕，初见，永远是最难忘的情节。初见，它可以是朦胧到极致，又可以是清晰到极致的画面；初见，它可以是淡雅到极致，又可以浓烈到极致的情愫。人生来去，虽然初见只是惊鸿一瞥，昙花一现，但它总是让人朝思暮想，念念不忘。</p>
<p>从古至今，人生遗憾的事，莫过于故事还未开始就已结束；人生痛苦的事，莫过于故事未完主角就已匆匆离场；人生悲哀的事，莫过于故事还在继续悲剧就已注定。缘来缘去，若一切如初见那该有多美妙、多幸福，若相看两不厌那该有多难得、多可贵。</p>
<p>岁月的经筒不停地摇转，假如世人能在懂得里皈依，那么，无论在叶落花谢的日子，还是在丰盈晴好的时光，人与人遇见时心里就能轻言一句：“哦，原来你也在这里”，人与人分离时便能挥手轻道一声：“你若安好，便是晴天”。</p>
<p>红尘的初识里，总有许多是花开的惊喜；人间的离别里，总有许多是花落的悲哀。其实，人世间所有的爱恨痴缠都注定是彼此生命里的一程风雨、一道风景、一个故事。若是无缘，也许某些曾经便会在心灵深处印刻成遗憾和忧伤；若是有缘，一切的交集便能在流年的脉络里蜕变成旖旎和慈悲。</p>
<p>人生若只如初见，隔山隔水的守望里，三千青丝将不再有凌乱的飞扬，飘飘的衣衫上将不再有苦泪千行。人生若只如初见，纵然擦肩，也不会只成陌路；纵然转身，也不会只剩空无。人生若只如初见，美丽的风景将一直在路上，凡尘的烟火就会陪伴爱的故事走到地老天荒，途经的四季便不会在风中枯瘦。人生若只如初见，所有的相思都将美到落泪，所有的日子都将活色生香。</p>
<p>此生的来去，有人催开了十里桃花，带来了人间四月天，为平庸的生命增添了不凡和曼妙；有人覆灭了一路灯盏，带来了波折和黑暗，让平静的世界沾染了怨恨和薄情。似水流年里，不管红颜抑或白发，不管青春抑或暮年，从初遇到离别，无论恨或不恨，都是对生命过往的记载；从初见到熟识，无论爱或不爱，都是对时间留白的成全。</p>
<p>丹青为谁美，人生几壶泪？这世上，有一种珍惜永远胜过次第花开，有一种懂得永远胜过繁花似锦。烟雨红尘，每个人都是因爱而降临人间，愿只愿，有爱之人不染孤身葬花的悲凉，有情之人能有与之偕老的欢喜。愿只愿，天上人间，永远花开是画，花落成诗。</p>
<p>烟火流年，如梦翩跹。人生若只如初见，手中无花也生香，心中无声亦深情。不管生命是一场美丽之约，还是凄苦之旅，请与初心常相伴，且与真情共白首。任时光流转，永远眼中有风月，心中有诗情，守一处花开，拥一份清欢。</p>
]]></content>
      
        <categories>
            
            <category> 文章阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> 美文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/11/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
