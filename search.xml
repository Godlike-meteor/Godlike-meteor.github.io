<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hexo博客搭建攻略（三）：高级篇【SEO优化】]]></title>
      <url>/2017/07/26/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%AB%98%E7%BA%A7%E7%AF%87%E3%80%90SEO%E4%BC%98%E5%8C%96%E3%80%91/</url>
      <content type="html"><![CDATA[<p>经过博客的基础搭建和必要组件的集成后，我们不能让自己的博客仅仅局限于自己使用，我们还得让它在Google和百度上能搜索的到，最好要在搜索的第一页进行展示，借鉴了简书上一些作者的SEO优化方法，优化了一下SEO，发现我也能让自己的博客在Google上排名十分靠前了，上图：</p>
<p><img src="/images/例子1.jpg" alt=""></p>
<h2 id="首页-title-优化"><a href="#首页-title-优化" class="headerlink" title="首页 title 优化"></a>首页 title 优化</h2><p>更改 <code>index.swig</code> 文件(<code>your-hexo-site\themes\next\layout</code>);</p>
<p>将下面的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>修改成为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>这时候你的首页会更符合 <code>网站名称 - 网站描述</code> 这习惯了，搜索引擎爬虫也能更好的爬取你的内容了。</p>
<h2 id="添加-sitemap-站点地图"><a href="#添加-sitemap-站点地图" class="headerlink" title="添加 sitemap 站点地图"></a>添加 sitemap 站点地图</h2><p>1.安装sitemap站点地图自动生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>在<code>主题配置文件</code>中添加一下配置。</p>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客搭建攻略（二）：进阶篇]]></title>
      <url>/2017/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p>
<p>讲完了基础的博客搭建，下面大家也发现默认的主题并不好看，今天我们要讲解的就是有关next主题的优化。<br>首先， <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next使用文档</a>展示了next主题的基本设置和一些集成操作，在这里就不加过多的描述了，今天我要讲的是博客集成的一些功能的实现。</p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<p>在这里我使用的是Mist主题，你也可以挑选自己喜欢的样式。</p>
<p><img src="/images/演示5.jpg" alt=""></p>
<h2 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h2><p>在实现了简单的页面美化之后，我们需要让自己的博客更加与众不同，想不想在阅读文章的时候让读者来一段轻松的音乐呢？</p>
<p>首先，我们可以直接登录网易云音乐，点击生成外链播放器。</p>
<p><img src="/images/演示6.jpg" alt=""></p>
<p>然后将最后生成的html代码复制到你想要复制的地方就可以添加网易云音乐了。</p>
<p><img src="/images/演示7.jpg" alt=""></p>
<p>是不是很棒呢？赶紧get√吧！</p>
<p><img src="/images/演示8.jpg" alt=""></p>
<h2 id="设置网站logo"><a href="#设置网站logo" class="headerlink" title="设置网站logo"></a>设置网站logo</h2><p>其实设置网站logo跟设置头像一样，在配置文件中引入正确的地址就可以了，但是网站logo对图片是有要求的，我们需要在 <a href="http://tool.lu/favicon/" target="_blank" rel="external">Favicon在线制作</a> 工具中制作32*32的.ico图片，然后放在blog/sourse/images下面，在<code>主题配置文件</code>中添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon:images/favicon.ico</div></pre></td></tr></table></figure>
<p>效果如图所示：</p>
<p><img src="/images/演示9.jpg" alt=""></p>
<h2 id="文章末尾添加“本文结束”标记"><a href="#文章末尾添加“本文结束”标记" class="headerlink" title="文章末尾添加“本文结束”标记"></a>文章末尾添加“本文结束”标记</h2><h3 id="新建passage-end-tag-swig文件"><a href="#新建passage-end-tag-swig文件" class="headerlink" title="新建passage-end-tag.swig文件"></a>新建passage-end-tag.swig文件</h3><p>在路径<code>\themes\next\layout\_macro</code>中添加<code>passage-end-tag.swig</code>文件，其内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.passage_end_tag.enabled %&#125;</div><div class="line">&lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;</div><div class="line">------ 本文结束 ------&lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h3 id="修改-post-swig文件"><a href="#修改-post-swig文件" class="headerlink" title="修改 post.swig文件"></a>修改 post.swig文件</h3><p>在<code>\themes\next\layout\_macro\post.swig</code>中，<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="在主题配置文件中添加字段"><a href="#在主题配置文件中添加字段" class="headerlink" title="在主题配置文件中添加字段"></a>在主题配置文件中添加字段</h3><p>在主题配置文件``中添加以下字段开启此功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 文章末尾添加“本文结束”标记</div><div class="line">passage_end_tag:</div><div class="line">  enabled: true</div></pre></td></tr></table></figure>
<p>完成以上设置之后，在每篇文章之后都会添加“本文结束”标记。</p>
<h2 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h2><p>不蒜子统计是一个非常棒的统计功能，在一开始我就非常喜欢使用这个功能，不蒜子统计十分精准，基本上同一个人浏览多次还会显示一个人，可以精确的统计访问人数。</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>编辑 <code>主题配置文件</code> 中的 <code>busuanzi_count</code> 的配置项。</p>
<p>当<code>enable: true</code>时，代表开启全局开关。若<code>site_uv</code>、<code>site_pv、page_pv</code>的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</p>
<h3 id="站点UV配置"><a href="#站点UV配置" class="headerlink" title="站点UV配置"></a>站点UV配置</h3><p>当<code>site_uv: true</code>时，代表在页面底部显示站点的UV值。</p>
<p><code>site_uv_header</code>和<code>site_uv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[site_uv_header]</code>UV值<code>[site_uv_footer]</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 效果：本站访客数12345人次</div><div class="line">site_uv: true</div><div class="line">site_uv_header: 本站访客数</div><div class="line">site_uv_footer: 人次</div></pre></td></tr></table></figure>
<h3 id="站点PV配置"><a href="#站点PV配置" class="headerlink" title="站点PV配置"></a>站点PV配置</h3><p>当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。</p>
<p><code>site_pv_header</code>和<code>site_pv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[site_pv_header]</code>PV值<code>[site_pv_footer]</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 效果：本站总访问量12345次</div><div class="line">site_pv: true</div><div class="line">site_pv_header: 本站总访问量</div><div class="line">site_pv_footer: 次</div></pre></td></tr></table></figure>
<h3 id="单页面PV配置"><a href="#单页面PV配置" class="headerlink" title="单页面PV配置"></a>单页面PV配置</h3><p>当<code>page_pv: true</code>时，代表在文章页面的标题下显示该页面的PV值（阅读数）。</p>
<p><code>page_pv_header</code>和<code>page_pv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[page_pv_header]</code>PV值<code>[page_pv_footer]</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 效果：本文总阅读量12345次</div><div class="line">page_pv: true</div><div class="line">page_pv_header: 本文总阅读量</div><div class="line">page_pv_footer: 次</div></pre></td></tr></table></figure>
<p>配置好就会显示如下效果：</p>
<p><img src="/images/演示10.jpg" alt=""></p>
<h2 id="鼠标点击红心的设置"><a href="#鼠标点击红心的设置" class="headerlink" title="鼠标点击红心的设置"></a>鼠标点击红心的设置</h2><p>1.将 <a href="https://github.com/Godlike-meteor/Godlike-meteor.github.io/blob/master/js/src/love.js" target="_blank" rel="external">love.js</a> 文件添加到 <code>\themes\next\source\js\src</code> 文件目录下。<br>2.找到 <code>\themes\next\layout\_layout.swing</code> 文件， 在文件的后面，<code>&lt;/body&gt;</code> 标签之前 添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="集成友言评论"><a href="#集成友言评论" class="headerlink" title="集成友言评论"></a>集成友言评论</h2><p>也许有很多小盆友想要在自己的博客里集成评论功能，但是目前支持next最好的就是多说，无奈多说经常炸，自己动手，丰衣足食，经过我多次尝试，我发现友言这款第三方插件非常不错。</p>
<h3 id="注册友言"><a href="#注册友言" class="headerlink" title="注册友言"></a>注册友言</h3><p>首先，我们进入<a href="http://www.uyan.cc/" target="_blank" rel="external">友言官网</a>，注册新用户，并登录。</p>
<p><img src="/images/演示11.jpg" alt=""></p>
<h3 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h3><p><img src="/images/演示12.jpg" alt=""></p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><p>到这里我们就可以改造啦！在目录<code>thems/next/layout/_scripts/third_party/comments</code>下添加友言的模块文件<code>youyan.swig</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname)</div><div class="line">  and not theme.duoshuo_shortname</div><div class="line">  and not theme.disqus_shortname</div><div class="line">  and not theme.hypercomments_id</div><div class="line">  and not theme.gentie_productKey %&#125;</div><div class="line"></div><div class="line">  &#123;% if theme.youyan_uid %&#125;</div><div class="line">    &#123;% set uid = theme.youyan_uid %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line"></div><div class="line">  &#123;% if page.comments %&#125;</div><div class="line">      &lt;!-- UY BEGIN --&gt;</div><div class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;http://v2.uyan.cc/code/uyan.js?uid=&#123;&#123;uid&#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">      &lt;!-- UY END --&gt;</div><div class="line">  &#123;% endif %&#125;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p>修改<code>thems/next/layout/_scripts/third_party/comments.swig</code>文件，添加友言脚本的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% include &apos;./comments/duoshuo.swig&apos; %&#125;</div><div class="line">&#123;% include &apos;./comments/disqus.swig&apos; %&#125;</div><div class="line">&#123;% include &apos;./comments/youyan.swig&apos; %&#125;</div><div class="line">&#123;% include &apos;./comments/hypercomments.swig&apos; %&#125;</div><div class="line">&#123;% include &apos;./comments/gentie.swig&apos; %&#125;</div></pre></td></tr></table></figure>
<p>修改<code>themes/next/layout/_partials/comments.swig</code>文件,在<code>endif</code>之前添加友言的div。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;% if page.comments %&#125;</div><div class="line">  &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</div><div class="line">    &#123;% if (theme.duoshuo and theme.duoshuo.shortname) or theme.duoshuo_shortname %&#125;</div><div class="line">      &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&#123;&#123; page.path &#125;&#125;&quot;</div><div class="line">          data-title=&quot;&#123;&#123; page.title &#125;&#125;&quot; data-url=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &#123;% elseif theme.facebook_sdk.enable and theme.facebook_comments_plugin.enable %&#125;</div><div class="line">      &lt;div class=&quot;fb-comments&quot;</div><div class="line">          data-href=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</div><div class="line">          data-numposts=&quot;&#123;&#123; theme.facebook_comments_plugin.num_of_posts &#125;&#125;&quot;</div><div class="line">          data-width=&quot;&#123;&#123; theme.facebook_comments_plugin.width &#125;&#125;&quot;</div><div class="line">          data-colorscheme=&quot;&#123;&#123; theme.facebook_comments_plugin.scheme &#125;&#125;&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &#123;% elseif theme.disqus_shortname %&#125;</div><div class="line">      &lt;div id=&quot;disqus_thread&quot;&gt;</div><div class="line">        &lt;noscript&gt;</div><div class="line">          Please enable JavaScript to view the</div><div class="line">          &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;</div><div class="line">        &lt;/noscript&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &#123;% elseif theme.hypercomments_id %&#125;</div><div class="line">      &lt;div id=&quot;hypercomments_widget&quot;&gt;&lt;/div&gt;</div><div class="line">    &#123;% elseif theme.gentie_productKey %&#125;</div><div class="line">      &lt;div id=&quot;cloud-tie-wrapper&quot; class=&quot;cloud-tie-wrapper&quot;&gt;&lt;/div&gt;</div><div class="line">    &#123;% elseif theme.youyan_uid %&#125;</div><div class="line">        &lt;div id=&quot;uyan_frame&quot;&gt;&lt;/div&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p>在<code>thems/next/_config.yml</code>中<code>Third Party Services Settings</code>下添加友言的配置信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">#duoshuo_shortname:</div><div class="line"></div><div class="line"># youyan</div><div class="line">youyan_uid: 你的UID</div></pre></td></tr></table></figure>
<p>至此，改造完成。运行hexo clean清理一下目录，hexo g重新生成一次所有的文档，hexo s运行服务器以后，就可以查看评论效果了。</p>
<h2 id="关于RSS"><a href="#关于RSS" class="headerlink" title="关于RSS"></a>关于RSS</h2><p>很多同学看到别人的博客会集成订阅的功能（RSS），但是next使用文档中完全没有这方面的介绍，所以显得束手无策。金条就教大家如何去生成RSS功能。</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>首先需要安装一个Hexo插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-feed</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>接下来需要在<code>站点配置文件</code>中配置一下，打开<code>站点配置文件</code>，在其中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">plugins:</div><div class="line">hexo-generate-feed</div></pre></td></tr></table></figure>
<p>然后在<code>主题配置文件</code>中配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure>
<h3 id="生成-RSS-Feed"><a href="#生成-RSS-Feed" class="headerlink" title="生成 RSS Feed"></a>生成 RSS Feed</h3><p>配置完运行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<p>重新生成一次，重新生成一次，你会在 <code>./public</code>文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p>
<p>最后你可以看到：</p>
<p><img src="/images/演示13.jpg" alt=""></p>
<h2 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h2><p>头像旋转就是当你鼠标经过的时候，让自己的头像旋转360度，还是挺炫酷的，快来get√吧！</p>
<p>修改头像特效主要是修改 Hexo 目录下 <code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code> 文件。</p>
<h3 id="头像圆形的修改"><a href="#头像圆形的修改" class="headerlink" title="头像圆形的修改"></a>头像圆形的修改</h3><p>修改<code>sidebar-author.styl</code>文件中的<code>.site-author-image</code>css样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  /*头像圆形*/</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="鼠标经过旋转特效"><a href="#鼠标经过旋转特效" class="headerlink" title="鼠标经过旋转特效"></a>鼠标经过旋转特效</h3><p>修改<code>sidebar-author.styl</code>文件，添加CSS样式<code>img:hover</code>如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">img:hover &#123;</div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">  transform: rotateZ(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  /* 头像圆形 */</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">  box-shadow: inset 0 -1px 0 #333sf;</div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transition: -webkit-transform 1.5s ease-out;</div><div class="line">  -moz-transition: -moz-transform 1.5s ease-out;</div><div class="line">  transition: transform 1.5s ease-out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="头像循环旋转效果修改"><a href="#头像循环旋转效果修改" class="headerlink" title="头像循环旋转效果修改"></a>头像循环旋转效果修改</h3><p>修改 <code>sidebar-author.styl</code> 文件，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/* Z 轴旋转动画 */</div><div class="line">@-webkit-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -webkit-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -webkit-transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-moz-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -moz-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -moz-transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    transform: rotateZ(360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.site-author-image &#123;</div><div class="line">  display: block;</div><div class="line">  margin: 0 auto;</div><div class="line">  padding: $site-author-image-padding;</div><div class="line">  max-width: $site-author-image-width;</div><div class="line">  height: $site-author-image-height;</div><div class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  /* 头像圆形 */</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">  box-shadow: inset 0 -1px 0 #333sf;</div><div class="line">  /* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒</div><div class="line">    动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */</div><div class="line">  -webkit-animation: play 3s linear infinite;</div><div class="line">  -moz-animation: play 3s linear infinite;</div><div class="line">  animation: play 3s linear infinite;</div><div class="line">  /* 鼠标经过头像旋转360度</div><div class="line">  -webkit-transition: -webkit-transform 1.5s ease-out;</div><div class="line">  -moz-transition: -moz-transform 1.5s ease-out;</div><div class="line">  transition: transform 1.5s ease-out;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>鼠标经过停止头像旋转：修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">img:hover &#123;</div><div class="line">  /* 鼠标经过停止头像旋转 */</div><div class="line">  -webkit-animation-play-state:paused;</div><div class="line">  animation-play-state:paused;</div><div class="line">  /* 鼠标经过头像旋转360度</div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">  transform: rotateZ(360deg);*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即可实现头像的旋转功能，是不是特别炫酷呢？</p>
<h2 id="添加Fork-Me-On-Github"><a href="#添加Fork-Me-On-Github" class="headerlink" title="添加Fork Me On Github"></a>添加Fork Me On Github</h2><p>添加Fork Me On Github挂件。首先拷贝Github挂件样式代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;https://github.com/you&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/8b6b8ccc6da3aa5722903da7b58eb5ab1081adee/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6f72616e67655f6666373630302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_orange_ff7600.png&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>接下来修改代码的href为自己的Github地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;https://github.com/you&quot;&gt;</div><div class="line">改为:</div><div class="line">&lt;a href=&quot;https://github.com/hhstore&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="修改hexo主题"><a href="#修改hexo主题" class="headerlink" title="修改hexo主题"></a>修改hexo主题</h3><p>修改文件: <code>themes/next/layout/_layout.swig</code><br>打开<code>_layout.swig</code>文件,找到如下对应位置,添加上述样式代码段即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html class=&quot;theme-next &#123;% if theme.use_motion %&#125;use-motion&#123;% endif %&#125; &#123;% if theme.scheme %&#125;theme-next-&#123;&#123; theme.scheme | lower &#125;&#125;&#123;% endif %&#125;&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &#123;% include &apos;_partials/head.swig&apos; %&#125;</div><div class="line">  &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &#123;% include &apos;_partials/old-browsers.swig&apos; %&#125;</div><div class="line">  &lt;div class=&quot;container one-column &#123;% block page_class %&#125;&#123;% endblock %&#125;&quot;&gt;</div><div class="line">    &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</div><div class="line">    </div><div class="line">    </div><div class="line">    &lt;!----------- add Fork me on Github ------------&gt;</div><div class="line">    </div><div class="line">    &lt;a href=&quot;https://github.com/hhstore&quot;&gt;&lt;img style=&quot;position: absolute; top: 500; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/8b6b8ccc6da3aa5722903da7b58eb5ab1081adee/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6f72616e67655f6666373630302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_orange_ff7600.png&quot;&gt;&lt;/a&gt;</div><div class="line">    </div><div class="line">    &lt;!----------- add Fork me on Github ------------&gt;   </div><div class="line">    </div><div class="line">    </div><div class="line">    &lt;div id=&quot;header&quot; class=&quot;header&quot;&gt;</div><div class="line">      &lt;div class=&quot;header-inner&quot;&gt;</div><div class="line">        &#123;% include &apos;_partials/header.swig&apos; %&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;!-------------省略-------------------&gt;</div><div class="line">    &lt;!-------------省略-------------------&gt;</div><div class="line">    &lt;div class=&quot;back-to-top&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>就这样，我们就可以实现左上角的丝带效果了。</p>
<h2 id="添加自定义导航分类"><a href="#添加自定义导航分类" class="headerlink" title="添加自定义导航分类"></a>添加自定义导航分类</h2><p>之所以添加自定义导航分类是因为现有的导航分类不够用，所以我们需要扩展导航分类。</p>
<h3 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h3><p>1.新建<code>source/tools/index.md</code>文件。</p>
<p>在<code>/source/</code> 文件夹,新建 <code>tools</code>目录,并添加一个<code>index.md</code>文件。可以拷贝其他目录(如tags)中的<code>index.md</code>文件。</p>
<p>2.修改主题配置文件参数。</p>
<p>找到<code>menu</code>标签项, 添加子项:<code>tools: /tools</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># when running hexo in a subdirectory (e.g. domain.tld/blog), remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )</div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div><div class="line">  tools: /tools      # 添加位置</div><div class="line">  about: /about</div><div class="line">  #commonweal: /404.html</div></pre></td></tr></table></figure>
<p>3.修改<code>themes/next/languages/zh-Hans.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">title:</div><div class="line">  archive: 归档</div><div class="line">  category: 分类</div><div class="line">  tag: 标签</div><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  tags: 标签</div><div class="line">  tools: 工具       # 添加位置</div><div class="line">  about: 关于</div><div class="line">  commonweal: 公益404</div></pre></td></tr></table></figure>
<p>4.修改完,重新编译部署即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客搭建攻略（一）：基础篇]]></title>
      <url>/2017/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8EHexo-Github%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>相信程序猿们都有开博客的想法，因为一个博客完美的集分享代码、记录笔记和展示自己等功能为一身。今天就自己搭建的博客给大家分享一下如何搭建基于hexo + GitHub的博客。</p>
<h2 id="搭建的准备"><a href="#搭建的准备" class="headerlink" title="搭建的准备"></a>搭建的准备</h2><p>Hexo基于Node.js环境，Node.js是一个Javascript运行环境。如果想搭建基于hexo的博客，首先要安装Node.js。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows平台请到<a href="https://nodejs.org/en/" target="_blank" rel="external">node官网</a>下载安装包进行安装。</p>
<p><img src="/images/node.jpg" alt=""></p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>安装好Node.js环境后，就可以通过node来安装Hexo。<br>首先我们在自己的工作目录下，新建一个blog目录，在此目录上我们可以管理自己的博客源代码，进入blog目录，执行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install -g hexo         //安装Hexo</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init                    //初始化Hexo</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install                 //安装依赖包</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g                       //生成静态页面</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s                       //生成本地预览</div></pre></td></tr></table></figure>
<p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，看到以下界面说明Hexo安装成功。</p>
<p><img src="/images/Hexo预览.jpg" alt=""></p>
<h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>目前的一切都只能在本机预览，既然是博客，就需要上传到网络上让人们访问。当然你可以选择购买服务器来搭建自己的博客，但是本教程是教给大家如何免费的使用GitHub进行博客搭建。所以，我们需要登录GitHub官网进行注册，并实现我们的搭建。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>首先登录我们的GitHub，在右上角的加号处新建我们的仓库。</p>
<p><img src="/images/演示1.jpg" alt=""></p>
<p>如下图，填写仓库名称，千万要注意仓库名称的格式，一定要以“你的GitHub账号.github.io”命名，这个仓库就是你以后访问你博客站点的默认域名。</p>
<p><img src="/images/演示2.jpg" alt=""></p>
<p>创建成功后，接下来就需要配置SSH-key。</p>
<h2 id="部署公匙"><a href="#部署公匙" class="headerlink" title="部署公匙"></a>部署公匙</h2><p>Hexo部署时，采用git协议，为避免暴露账户密码，最好使用证书认证，所以我们需要在Github部署公钥。</p>
<p>进入账号的<code>Personal setting</code>页面，选择<code>SSH and GPG keys</code>，进入密钥配置页面。填入本机公钥，点击<code>Add SSH key</code>，如下图</p>
<p><img src="/images/演示3.jpg" alt=""></p>
<p>输入以下指令，测试密钥连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果返回<code>Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则说明公钥部署成功。特别提醒，请注意保护本机私钥的安全。</p>
<p>如果本机还没有SSH密钥，请点击下方详细链接，这里就不做介绍了。</p>
<p>步骤请点击 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">window下配置SSH连接GitHub、GitHub配置ssh key</a></p>
<h2 id="将blog部署到-GitHub-pages-上"><a href="#将blog部署到-GitHub-pages-上" class="headerlink" title="将blog部署到 GitHub pages 上"></a>将blog部署到 GitHub pages 上</h2><h3 id="配置deploy"><a href="#配置deploy" class="headerlink" title="配置deploy"></a>配置deploy</h3><p>找到blog目录下的配置文件_config.yml【为了方便辨析，下文统一称之为站点配置文件】,用编辑器打开此文件，找到此文件中的deploy字段，按照以下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>注意：将yourname改成你自己的GitHub名字！</p>
<h3 id="设置git身份信息"><a href="#设置git身份信息" class="headerlink" title="设置git身份信息"></a>设置git身份信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"你的用户名"</span></div><div class="line">git config --global user.email <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure>
<p>然后执行以下指令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>执行以下指令进行部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>浏览器打开 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> 就可以看到刚才本地预览页面,做到这里，恭喜你已经成功将自己的博客传到网站上了。</p>
<h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><p>尽管到这里你已经可以通过 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> 来访问自己的博客，但是我想大家也会觉得这种名字很土，想不想加上自己喜欢的域名，特别是.com等解析度很高的域名呢？</p>
<p>先去买一个域名，什么后缀的都可以，在这里博主推荐购买腾讯云的域名，最近腾讯云有云+校园计划，可以每月花1元钱租一台云服务器，还可以领25块钱的域名优惠券，点击这里哦！<a href="https://www.qcloud.com/act/campus" target="_blank" rel="external">腾讯云+校园计划</a></p>
<p>进域名控制台，在解析里面添加一条CNAME记录，指向<code>yourname.github.io.</code>即可【注意，最后有个点】，具体请看如图配置。</p>
<p><img src="/images/演示4.jpg" alt=""></p>
<p>到blog/source目录下创建CNAME文件，添加你要绑定的域名保存。</p>
<p>然后执行部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>不出意外，这时用自己的域名就可以访问自己的博客站点，如果出错，极可能是DNS数据还没更新，请稍等一段时间再试，DNS数据同步更新一般不会超过48小时。</p>
<h2 id="Hexo-基本操作"><a href="#Hexo-基本操作" class="headerlink" title="Hexo 基本操作"></a>Hexo 基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new<span class="string">"postName"</span> <span class="comment">#新建文章</span></div><div class="line">hexo new page<span class="string">"pageName"</span> <span class="comment">#新建页面</span></div><div class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="comment">#将.deploy目录部署到指定空间</span></div><div class="line">hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></div><div class="line">hexo version <span class="comment">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<p>通过这些操作你就能通过git bush来上传你博客的内容了，是不是很简单呢？<br>接下来我还会推出有关next主题的配置和美化的博客，谢谢大家。</p>
<p>部分资料参考 <a href="http://carryguan.me/2016/07/02/hexo-gihubpages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">carry学姐的布置篇</a>，也是我的启蒙篇，感谢学姐！</p>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript文件夹模拟【代码笔记】]]></title>
      <url>/2017/07/18/JavaScript%E6%96%87%E4%BB%B6%E5%A4%B9%E6%A8%A1%E6%8B%9F%E3%80%90%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0%E3%80%91/</url>
      <content type="html"><![CDATA[<p>这是这次大实验的编码实现，由于匆忙来不及做可视化。尽管如此我会抽出时间进行可视化的操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element,child,parent,brother)&#123;</div><div class="line">    this.data = element;</div><div class="line">    this.child = child;</div><div class="line">    this.parent = parent;</div><div class="line">    this.brother = brother;</div><div class="line">    this.show = show;</div><div class="line">    this.flog = 0;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.data;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BST</span></span>()&#123;</div><div class="line">    this.root = new Node(<span class="string">'我的电脑'</span>,null,null,null);</div><div class="line">    this.insert = insert;</div><div class="line">    this.remove = remove;</div><div class="line">    this.find = find;</div><div class="line">    this.clearFind = clearFind;</div><div class="line">    this.stick = stick;</div><div class="line">    this.rename = rename;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> find(element)&#123;</div><div class="line">    var root = this.root;</div><div class="line">    <span class="keyword">if</span>(root.child == null)&#123;</div><div class="line">        console.log(<span class="string">"本机无文件夹，无法查找你所需要的文件夹！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var currout = root; </div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>((currout.child != null)&amp;&amp;(currout.child.flog != 1))&#123;</div><div class="line">                currout.flog = 1;</div><div class="line">                currout = currout.child;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(currout.data == element)&#123;</div><div class="line">                    console.log(<span class="string">"查找成功！节点为："</span> + currout);</div><div class="line">                    <span class="built_in">return</span> currout;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.flog = 1;</div><div class="line">                    <span class="keyword">if</span>(currout == this.root)&#123;</div><div class="line">                        console.log(<span class="string">"本机没有你想要查找的文件夹，请确定输入文件夹名称正确！"</span>);</div><div class="line">                        <span class="built_in">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                            currout = currout.brother;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span>&#123;</div><div class="line">                            currout = currout.parent;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">clearFind</span></span>()&#123;</div><div class="line">    var root = this.root;</div><div class="line">    <span class="keyword">if</span>(root.child == null)&#123;</div><div class="line">        console.log(<span class="string">"本机无文件夹,无法清除文件夹标记！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var currout = root; </div><div class="line">        var count = 0;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>((currout.child != null)&amp;&amp;((count != 1)||(currout.child.flog == 1)))&#123;</div><div class="line">                currout = currout.child;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                count = 1;</div><div class="line">                <span class="keyword">if</span>(currout == this.root)&#123;</div><div class="line">                    console.log(<span class="string">"清除成功！"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.flog = 0;</div><div class="line">                    <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                        currout = currout.brother;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        currout = currout.parent;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> insert(parentNodeElement,element)&#123;</div><div class="line">    var newNode = new Node(element,null,null,null);</div><div class="line">    var parent = this.find(parentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    <span class="keyword">if</span>(parent.child == null)&#123;</div><div class="line">        parent.child = newNode;</div><div class="line">        newNode.parent = parent;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        newNode.brother = parent.child;</div><div class="line">        parent.child = newNode;</div><div class="line">        newNode.parent = parent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(parentNodeElement,element)&#123;</div><div class="line">    var parent = this.find(parentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var currout = parent.child;</div><div class="line">    var Brother;</div><div class="line">    <span class="keyword">while</span>(1)&#123;</div><div class="line">        <span class="keyword">if</span>(parent.child.data == element)&#123;</div><div class="line">            parent.child = parent.child.brother;</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            Brother = currout;</div><div class="line">            currout = currout.brother;</div><div class="line">            <span class="keyword">if</span>(currout.data == element)&#123;</div><div class="line">                Brother.brother = currout.brother;</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> stick(oldParentNodeElement,newParentNodeElement,element)&#123;</div><div class="line">    var oldold = this.find(oldParentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var newnew = this.find(newParentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var findNode = this.find(element);</div><div class="line">    this.clearFind();</div><div class="line">    <span class="keyword">if</span>((oldold.child == findNode)&amp;&amp;(findNode.brother == null))&#123;</div><div class="line">        findNode.brother = newnew.child;</div><div class="line">        newnew.child = findNode;</div><div class="line">        findNode.parent = newnew;</div><div class="line">        oldold.child = null;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((oldold.child == findNode)&amp;&amp;(findNode.brother != null))&#123;</div><div class="line">        <span class="keyword">if</span>(newnew.child == null)&#123;</div><div class="line">            newnew.child = findNode;</div><div class="line">            oldold.child = findNode.brother;</div><div class="line">            findNode.brother = null;</div><div class="line">            findNode.parent = newnew;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var currout = oldold.child;</div><div class="line">            <span class="keyword">while</span>(1)&#123;</div><div class="line">                <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                    currout = currout.brother;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.brother = findNode;</div><div class="line">                    oldold.child = findNode.brother;</div><div class="line">                    findNode.brother = null;</div><div class="line">                    findNode.parent = newnew;</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((oldold.child != findNode))&#123;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            var currout1 = oldold.child;</div><div class="line">            var father = null;</div><div class="line">            <span class="keyword">if</span>(currout1.brother != findNode)&#123;</div><div class="line">                father = currout1;</div><div class="line">                currout1 = currout1.brother;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                father.brother = findNode.brother;</div><div class="line">                findNode.brother = newnew.child;</div><div class="line">                newnew.child = findNode;</div><div class="line">                findNode.parent = newnew;</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(element,newElement)&#123;</div><div class="line">    var oldold = this.find(element);</div><div class="line">    this.clearFind();</div><div class="line">    oldold.data = newElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 树]]></title>
      <url>/2017/07/17/JavaScript-%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br>1.每个节点有零个或多个子节点；<br>2.没有父节点的节点称为根节点；<br>3.每一个非根节点有且只有一个父节点；<br>4.除了根节点外，每个子节点可以分为多个不相交的子树。</p>
<h2 id="JavaScript树的结构"><a href="#JavaScript树的结构" class="headerlink" title="JavaScript树的结构"></a>JavaScript树的结构</h2><p>今天我们要讲的是排序二叉树的JavaScript实现，首先，排序二叉树的节点跟我们双向链表的节点很像，都有两个指针，不同的是，它的指针指向的是它的左孩子和右孩子，具体实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element,leftChild,rightChild)&#123;     //传入节点的值，左右指针</div><div class="line">    this.data = element;</div><div class="line">    this.leftChild = leftChild;</div><div class="line">    this.rightChild = rightChild;</div><div class="line">    this.show = show;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;                                  //显示节点的值</div><div class="line">    <span class="built_in">return</span> this.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们就要实现树这种数据结构了，每次我们要新建一个树都需要新建一个根节点让其指向<code>null</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BST</span></span>()&#123;</div><div class="line">    this.root = null;</div><div class="line">    this.insert = insert;             //插入节点</div><div class="line">    this.maxValue = maxValue;         //寻找树中的最大值</div><div class="line">    this.minValue = minValue;         //寻找树中的最小值</div><div class="line">    this.find = find;                 //寻找树中的某个值</div><div class="line">    this.preOrder = preOrder;         //前序遍历</div><div class="line">    this.inOrder = inOrder;           //中序遍历</div><div class="line">    this.postOrder = postOrder;       //后序遍历</div><div class="line">    this.remove = remove;             //删除某个节点</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们要实现的就是树的节点的插入，这需要我们调用<code>insert()</code>函数了。</p>
<h3 id="节点的插入"><a href="#节点的插入" class="headerlink" title="节点的插入"></a>节点的插入</h3><p>节点的插入方法有两种，一种是递归方法插入节点，另外一种是非递归的方法插入节点，这里我采用的是非递归的方法，尽管对内存占用比较大，但是有助于新手的理解，插入的时候要判定树中是否有节点，没有的话直接变成根节点；如果有节点，循环查找，若比节点小往左走，比节点大往右走，直到往左走遇到空或者往右走遇到空直接插入节点即可，具体编码实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//插入</div><div class="line"><span class="keyword">function</span> insert(element)&#123;</div><div class="line">    var node = new Node(element,null,null);</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        this.root = node;                 //让节点变成根节点</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;            //记录根节点的位置</div><div class="line">        var parents;                     //记录你找的节点的父节点的位置</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            parents = copy;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;     //如果小就往左走</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.leftChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                copy = copy.rightChild;   //如果大就往右走</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.rightChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是简单的非递归调用了，接下来我们来试试查找一下我们的树中的节点。</p>
<h3 id="节点的查找"><a href="#节点的查找" class="headerlink" title="节点的查找"></a>节点的查找</h3><p>节点的查找分为三类：查找树中的最大值，查找树中的最小值，查找树中的某个值。查找的思路很简单，查找树中的某个值就跟插入函数很像，只不过插入函数找到某个节点后插入，而查找只需要返回就行了。查找树中的最大值也很简单，一直找根节点的<code>rightChild</code>直到为空，即为最大值，最小值同理，具体代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">//查找最大值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">maxValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.rightChild != null)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找最小值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">minValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.leftChild != null)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找某个值，返回节点</div><div class="line"><span class="keyword">function</span> find(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取节点。"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                console.log(copy);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写的比较麻烦使让每一步尽可能的清晰，相对于递归调用跟容易理解问题。接下来就轮到我们的遍历问题了。</p>
<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="什么是树的遍历"><a href="#什么是树的遍历" class="headerlink" title="什么是树的遍历"></a>什么是树的遍历</h3><p>在计算机科学里，树的遍历（也称为树的搜索）是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有节点的过程。具体的访问操作可能是检查节点的值、更新节点的值等。不同的遍历方式，其访问节点的顺序是不一样的。以下虽然描述的是二叉树的遍历算法，但它们也适用于其他树形结构。</p>
<h3 id="遍历的种类"><a href="#遍历的种类" class="headerlink" title="遍历的种类"></a>遍历的种类</h3><p>与那些基本上都有标准遍历方式（通常是按线性顺序）的线性数据结构（如链表、一维数组）所不同的是，树结构有多种不同的遍历方式。从二叉树的根节点出发，节点的遍历分为三个主要步骤：对当前节点进行操作（称为“访问”节点）、遍历左边子节点、遍历右边子节点。这三个步骤的先后顺序也是不同遍历方式的根本区别。</p>
<p>由于从给定的某个节点出发，有多个可以前往的下一个节点（树不是线性数据结构），所以在顺序计算（即非并行计算）的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO)或队列（FIFO）。由于树本身是一种自我引用（即递归定义）的数据结构，因此很自然也可以用递归方式，或者更准确地说，用corecursion，来实现延迟节点的保存。这时（采用递归的情况）这些节点被保存在call stack中。</p>
<p>遍历方式的命名，源于其访问节点的顺序。最简单的划分：是深度优先（先访问子节点，再访问父节点，最后是第二个子节点）？还是广度优先（先访问第一个子节点，再访问第二个子节点，最后访问父节点）？ 深度优先可进一步按照根节点相对于左右子节点的访问先后来划分。如果把左节点和右节点的位置固定不动，那么根节点放在左节点的左边，称为前序（pre-order）、根节点放在左节点和右节点的中间，称为中序（in-order）、根节点放在右节点的右边，称为后序（post-order）。对广度优先而言，遍历没有前序中序后序之分：给定一组已排序的子节点，其“广度优先”的遍历只有一种唯一的结果。</p>
<h3 id="JavaScript实现树的遍历"><a href="#JavaScript实现树的遍历" class="headerlink" title="JavaScript实现树的遍历"></a>JavaScript实现树的遍历</h3><p>根据上面的结构设计，我们要实现树的前序遍历，中序遍历和后序遍历。这里我们用递归实现，非常简单，只需要四行代码即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//前序排序</div><div class="line"><span class="keyword">function</span> preOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        console.log(node.show());        //根</div><div class="line">        preOrder(node.leftChild);        //左子树</div><div class="line">        preOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//中序排序</div><div class="line"><span class="keyword">function</span> inOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        inOrder(node.leftChild);        //左子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">        inOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//后序排序</div><div class="line"><span class="keyword">function</span> postOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        postOrder(node.leftChild);      //左子树</div><div class="line">        postOrder(node.rightChild);     //右子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="树节点的删除"><a href="#树节点的删除" class="headerlink" title="树节点的删除"></a>树节点的删除</h2><h3 id="删除的算法"><a href="#删除的算法" class="headerlink" title="删除的算法"></a>删除的算法</h3><p>接下来就是最考验脑力的删除操作了，因为在删除的过程中，你要考虑到不同的情况，针对每一种不同的情况，你要有针对性的反应和调整。树的删除具体分为五种情况和三个步骤：</p>
<p>1）判断参数的合法性，判断参数是否在当前的二叉树当中<br>2）删除的节点是根节点，此时应该怎么调整<br>3）删除的节点是普通节点，此时又应该怎么调整</p>
<p>情况一：删除的节点是根节点【即步骤二】<br>情况二：删除的节点是叶子节点<br>情况三：删除的节点只有左孩子没有右孩子<br>情况四：删除的节点只有右孩子没有左孩子<br>情况五：删除的节点既有左孩子也有右孩子</p>
<p>下面直接贴代码进行讲解：【为了更清晰的展示五种情况，将根单独列出来】</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无需删除节点。"</span>)                        //如果树为空，</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;                                            //删除节点的寻找</div><div class="line">        var parents;</div><div class="line">        var findNode;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                findNode = copy;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(findNode == this.root)&#123;                                  //删除节点为根节点判断四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                findNode = null;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                findNode.data = findNode.rightChild.data;</div><div class="line">                findNode.rightChild = findNode.rightChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.rightChild.leftChild; </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                findNode.data = findNode.leftChild.data;</div><div class="line">                findNode.rightChild = findNode.leftChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.leftChild.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var code = findNode.leftChild;</div><div class="line">                var studio;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(code.rightChild != null)&#123;</div><div class="line">                        studio = code;</div><div class="line">                        code = code.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    findNode.leftChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    studio.rightChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;                                                        // 不是根节点的四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = null;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = null;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var Chrome = findNode.leftChild;</div><div class="line">                var Google;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(Chrome.rightChild != null)&#123;</div><div class="line">                        Google = Chrome;</div><div class="line">                        Chrome = Chrome.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = Chrome.data;         //千万要记住只有一个左孩子的情况，我就错在这里了，报错的是rightChild undefined</div><div class="line">                    findNode.leftChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = Chrome.data;</div><div class="line">                    Google.rightChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天的资料就分享到这里，接下来我还会持续更新所学的。谢谢大家。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用JavaScript实现中缀表达式计算器【1.0】]]></title>
      <url>/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>学习了栈结构，你以为学完了栈？今天要讲的是中缀表达式转后缀表达式，后缀表达式的计算和中缀表达式的计算，接下来让我们开始吧！</p>
<h2 id="什么是中缀表达式和后缀表达式？"><a href="#什么是中缀表达式和后缀表达式？" class="headerlink" title="什么是中缀表达式和后缀表达式？"></a>什么是中缀表达式和后缀表达式？</h2><p>中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）。与前缀表达式（例：+ 3 4）或后缀表达式（例：3 4 +）相比，中缀表达式不容易被电脑解析，但仍被许多程序语言使用，因为它符合人们的普遍用法。<br>与前缀或后缀记法不同的是，中缀记法中括号是必需的。计算过程中必须用括号将操作符和对应的操作数括起来，用于指示运算的次序。</p>
<p>后缀表示法 (逆波兰表示法)（Reverse Polish notation，RPN，或逆波兰记法），是一种是由波兰数学家扬·武卡谢维奇1920年引入的数学表达式方式，在逆波兰记法中，所有操作符置于操作数的后面，因此也被称为后缀表示法。逆波兰记法不需要括号来标识操作符的优先级。</p>
<p>逆波兰记法中，操作符置于操作数的后面。例如表达“三加四”时，写作“3 4 +”，而不是“3 + 4”。如果有多个操作符，操作符置于第二个操作数的后面，所以常规中缀记法的“3 - 4 + 5”在逆波兰记法中写作“3 4 - 5 +”：先3减去4，再加上5。使用逆波兰记法的一个好处是不需要使用括号。例如中缀记法中“3 - 4 <em> 5”与“（3 - 4）</em>5”不相同，但后缀记法中前者写做“3 4 5 <em> -”，无歧义地表示“3 (4 5 </em>) -”；后者写做“3 4 - 5 *”。<br>逆波兰表达式的解释器一般是基于堆栈的。解释过程一般是：操作数入栈；遇到操作符时，操作数出栈，求值，将结果入栈；当一遍后，栈顶就是表达式的值。因此逆波兰表达式的求值使用堆栈结构很容易实现，并且能很快求值。</p>
<p>首先我们要进行的就是中缀表达式和后缀表达式的转换。开始吧！</p>
<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><p>首先让我们来了解一下有关中缀转后缀的算法，大概有以下几个规则：<br>(1)当读到数字直接送至输出队列中；<br>(2)当读到运算符t时：<br>    a.将栈中所有优先级高于或等于t的运算符弹出，送到输出队列中；<br>　  b.t进栈；<br>(3)读到左括号时总是将它压入栈中；<br>(4)读到右括号时，将靠近栈顶的第一个左括号上面的运算符全部依次弹出，送至输出队列后，再丢弃左括号；<br>(5)中缀表达式全部读完后，若栈中仍有运算符，将其送到输出队列中。 </p>
<h3 id="符号的优先级"><a href="#符号的优先级" class="headerlink" title="符号的优先级"></a>符号的优先级</h3><p>首先我们必须知道有关运算符优先级的问题，经过查阅，我们可以得到如下二维数组。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var sign = new Array();</div><div class="line">                    // +   -   *    /    (    )   <span class="comment">#</span></div><div class="line">sign[0] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //+</div><div class="line">sign[1] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //-</div><div class="line">sign[2] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     //*</div><div class="line">sign[3] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     ///</div><div class="line">sign[4] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'0'</span>,<span class="string">''</span>);  //(</div><div class="line">sign[5] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">''</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);       //)</div><div class="line">sign[6] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">''</span>,<span class="string">'0'</span>);  //<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>先找横行，代表栈中的运算符，再找纵行，代表你想要比较的运算符，<code>1</code>代表栈中符号优先级小于栈外符号优先级，栈外符号入栈；<code>-1</code>代表栈中符号优先级大于栈外符号优先级，栈中符号弹出，直到栈中符号优先级比栈外符号小，栈外符号入栈；<code>0</code>代表优先级一样，暂时不进行考虑。</p>
<h3 id="符号的比较函数"><a href="#符号的比较函数" class="headerlink" title="符号的比较函数"></a>符号的比较函数</h3><p>弄清楚符号的优先级，我们就可以对两个符号进行比较，具体实现代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Sign(a,b)&#123;</div><div class="line">    var str = [<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'#'</span>];</div><div class="line">    var str1;</div><div class="line">    var str2;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;7;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a == str[i])&#123;</div><div class="line">            str1 = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(b == str[i])&#123;</div><div class="line">            str2 = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var count = sign[str1][str2];</div><div class="line">    <span class="built_in">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将符号关系转换为数字更有利于我们之后的判断，接下来就是我们的正题来了。</p>
<h3 id="构造一个栈"><a href="#构造一个栈" class="headerlink" title="构造一个栈"></a>构造一个栈</h3><p>跟上一篇一样，我们需要构造一个基本的数据结构—-栈，来实现这个项目，不同的是，我们新增加了一个函数<code>peek()</code>来获取栈顶的第一个元素。下面是代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Stack</span></span>()&#123;</div><div class="line">    this.dataStore = [];</div><div class="line">    this.top = 0;</div><div class="line">    this.push = push;</div><div class="line">    this.pop = pop;</div><div class="line">    this.length = length;</div><div class="line">    this.peek = peek;</div><div class="line">    this.clear = clear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> push(element)&#123;</div><div class="line">    this.dataStore[this.top] = element;</div><div class="line">    this.top++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">pop</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[--this.top];;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">peek</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[this.top-1];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">clear</span></span>()&#123;</div><div class="line">    this.top = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">length</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造好一个栈之后，我们就需要进行最重要的步骤了，构造转换函数。</p>
<h3 id="中缀表达式转换函数"><a href="#中缀表达式转换函数" class="headerlink" title="中缀表达式转换函数"></a>中缀表达式转换函数</h3><p>中缀表达式转后缀表达式跟C语言不同，JavaScript是一种弱类型语言，它的实现更加的灵活，首先我们在栈中先压入<code>#</code>，令最后一个元素能够弹出，然后我们构造如下函数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Change(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();                       //构造一个栈</div><div class="line">    stack.push(<span class="string">"#"</span>);                               //将<span class="comment">#压入栈中</span></div><div class="line">    var outStack = new Array();                    //构造一个队列</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;       //如果是数字或者小数点进入循环</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));    //将整个字符串转换成小数数值后入队</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;              //遇到左括号直接入栈</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;         //遇到右括号将栈中左括号之前的符号全部弹出入队，然后删去左括号</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;</div><div class="line">                    outStack.push(stack.pop());</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;                            //两个符号判断关系，选择入队或弹出操作</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        outStack.push(stack.pop());</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就可以输入中缀表达式进行计算了，注意在控制台计算的时候在中缀表达式的后面加一个#号，防止栈内符号未完全弹出的情况出现。</p>
<p>测试实例：<code>Change(&#39;1+2*(3-1+2)-3#&#39;);</code><br>示例输出：<code>1231-2+*+3-</code> 注意，输出的是一个队，也就是一个数组，本样例是为了方便这样测试的。</p>
<h2 id="后缀表达式的计算"><a href="#后缀表达式的计算" class="headerlink" title="后缀表达式的计算"></a>后缀表达式的计算</h2><p>相对于中缀表达式转后缀表达式，后缀表达式的计算就简单多了，直接上代码，在注释中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">ffunction suffix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var outStack = new Stack();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);                 //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var str1 = parseFloat(outStack.pop());     //遇到符号将栈顶的两个数字弹出</div><div class="line">            var str2 = parseFloat(outStack.pop());     //后弹出的在前，先弹出的在后进行运算</div><div class="line">            switch(str[i])&#123;</div><div class="line">                <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(str2 + str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(str2 - str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(str2 * str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(str2 / str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.peek());         //直到栈中只有一个数字，显示即可，就是本次的运算结果</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试实例：<code>suffix(&#39;1231-2+*+3-&#39;)</code><br>示例输出：<code>6</code><br>注意后缀表达式的计算无需将符号入栈，只需要弹出数字进行运算即可。</p>
<h2 id="中缀表达式的计算"><a href="#中缀表达式的计算" class="headerlink" title="中缀表达式的计算"></a>中缀表达式的计算</h2><p>中缀表达式的计算原理如果你理解了中缀转后缀、后缀运算那么很快你就能够理解，这个例子也是直接在代码中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Infix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();</div><div class="line">    stack.push(<span class="string">"#"</span>);                       //将<span class="comment">#字压入栈</span></div><div class="line">    var outStack = new Array();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);   //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;  //符号判断完不进行入栈操作，而是进行弹出运算</div><div class="line">                    var a1 = parseFloat(outStack.pop());</div><div class="line">                    var a2 = parseFloat(outStack.pop());</div><div class="line">                    var a3 = stack.pop();</div><div class="line">                    switch(a3)&#123;</div><div class="line">                        <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(a2 + a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(a2 - a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(a2 * a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(a2 / a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        var b1 = parseFloat(outStack.pop());</div><div class="line">                        var b2 = parseFloat(outStack.pop());</div><div class="line">                        var a3 = stack.pop();</div><div class="line">                        switch(a3)&#123;</div><div class="line">                            <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(b2 + b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(b2 - b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(b2 * b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(b2 / b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.pop().toFixed(5));   //将小数位数控制在5位小数，结束运算。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本代码可以自行尝试输出和输入，根据这个原理以及少许html和CSS的基础就能够写出相当不错的计算器<br>计算器的实现：<a href="http://htmlpreview.github.io/?https://github.com/Godlike-meteor/-Infix-calculator/blob/master/%E7%A5%9E%E5%A5%87%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8.html" target="_blank" rel="external">神奇的计算器</a></p>
<p>今天的代码就到这里，谢谢大家！</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 栈]]></title>
      <url>/2017/07/16/JavaScript%20%E6%A0%88/</url>
      <content type="html"><![CDATA[<h2 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h2><p>堆栈（英语：stack），也可直接称栈（港澳台作堆叠），在计算机科学中，是一种特殊的串列形式的数据结构，它的特殊之处在于只能允许在链接串列或阵列的一端（称为堆叠顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或连结串列的形式来完成。堆叠的另外一个相对的操作方式称为伫列。</p>
<p>由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。</p>
<p>堆叠数据结构使用两种基本操作：推入（push）和弹出（pop）：<br>推入：将数据放入堆叠的顶端（阵列形式或串列形式），堆叠顶端top指标加一。<br>弹出：将顶端数据资料输出（回传），堆叠顶端资料减一。</p>
<h2 id="用JavaScript实现栈的数据结构"><a href="#用JavaScript实现栈的数据结构" class="headerlink" title="用JavaScript实现栈的数据结构"></a>用JavaScript实现栈的数据结构</h2><p>接下来我们就要使用JavaScript实现栈的数据结构，包含数据的推入和推出。</p>
<p>首先我们定义一个栈</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Stack</span></span>()&#123;</div><div class="line">    this.data = [];</div><div class="line">    this.top = 0;            //记录栈顶位置</div><div class="line">    this.pop = pop;          //右推出</div><div class="line">    this.push = push;        //右进入</div><div class="line">    this.display = display;</div><div class="line">    this.length = length;    //计算数组长度</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，top是用来记录栈顶位置，初始化为0，我们使用 <code>push()</code> 函数和 <code>pop()</code>函数来实现。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> push(element)&#123;</div><div class="line">    this.data[this.top] = element;</div><div class="line">    this.top++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">pop</span></span>()&#123;</div><div class="line">    var lastElement = this.data[this.top-1];</div><div class="line">    this.top--;</div><div class="line">    <span class="built_in">return</span> lastElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而<code>length()</code>函数和<code>display()</code>函数是用来显示栈长度和显示栈内元素的，下面展示函数的实现。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">length</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.top;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var length = this.top;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;length;i++)&#123;</div><div class="line">        console.log(this.data[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天讲的东西都十分基础，是为了接下来中缀表达式和后缀表达式实现打下基础，接下来的一篇博客中将详解中缀表达式的计算过程。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 循环链表 【约瑟夫斯问题】]]></title>
      <url>/2017/07/15/JavaScript%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>单向链表和双向链表学完之后，就学到了循环链表，循环链表其实比双向链表简单一点，就是将单向链表的表头和尾指针连接起来，因为跟单向链表很像，在这里我将通过一个小游戏讲解循环链表。</p>
<h3 id="约瑟夫斯问题"><a href="#约瑟夫斯问题" class="headerlink" title="约瑟夫斯问题"></a>约瑟夫斯问题</h3><p>约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。</p>
<p>有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。<br>问题是，给定了n和k，一开始要站在什么地方才能避免被处决？</p>
<p>经过改版，本游戏是通过输入总人数和杀人循环权来计算出一个循环链表中的最后一个节点，也就是最后一个幸存者的位置。</p>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>节点的数据结构实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环链表的实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);</div><div class="line">    this.head.next = this.head; //循环链表的实现</div><div class="line">    this.find = find;</div><div class="line">    this.insert = insert;</div><div class="line">    this.display = display;</div><div class="line">    this.findPrevious =findPrevious;</div><div class="line">    this.remove = remove;</div><div class="line">    this.findLast = findLast;</div><div class="line">    this.nodegame = nodegame;</div><div class="line">    this.kill = <span class="built_in">kill</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现链表的删除功能</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(!(currNode.next==null)&amp;&amp;(currNode.next.element != item))&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var prevNode = this.findPrevious(item);</div><div class="line">    <span class="keyword">if</span>(!(prevNode.next==null))&#123;</div><div class="line">        curtNode = prevNode.next;</div><div class="line">        prevNode.next = prevNode.next.next;</div><div class="line">        curtNode = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链表的显示功能</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(!(currNode == null) &amp;&amp; !(currNode.next.element == <span class="string">'head'</span>))&#123;</div><div class="line">        console.log(currNode.next.element);</div><div class="line">        currNode =currNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>节点的查找</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(currNode.element!=item)&#123;</div><div class="line">        currNode =currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> currNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement);</div><div class="line">    var current = this.find(item); </div><div class="line">    newNode.next = current.next;</div><div class="line">    current.next = newNode;</div><div class="line">    var lastNode = this.findLast();  </div><div class="line">        lastNode.next = this.head;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>杀人游戏的实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> nodegame(n,x)&#123;</div><div class="line">    var nNode = this.findLast();</div><div class="line">    <span class="keyword">for</span>(var i=1;i&lt;=n;i++)&#123;</div><div class="line">        this.insert(i,nNode.element);</div><div class="line">        nNode=nNode.next;</div><div class="line">    &#125;</div><div class="line">    this.kill(n,x);</div><div class="line">    var result = this.findLast().element;</div><div class="line">    this.head.next = this.head;</div><div class="line">    <span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="built_in">kill</span>(num,n)&#123;</div><div class="line">    var count=num-1;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(count)&#123;</div><div class="line">        <span class="keyword">for</span>(var i=0;i&lt;n;i++)&#123;</div><div class="line">            currNode=currNode.next;</div><div class="line">            <span class="keyword">if</span>(currNode==this.head)currNode=currNode.next;</div><div class="line">        &#125;</div><div class="line">        this.remove(currNode.element);</div><div class="line">        count--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var gal = new LList();</div><div class="line"><span class="keyword">function</span> game(playerNum,killNum)&#123;</div><div class="line">    <span class="built_in">return</span> gal.nodegame(playerNum,killNum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>特别感谢大佬，喜欢的戳这里→<a href="https://github.com/sokonen" target="_blank" rel="external">大佬</a>,今天的代码就分享到这里。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 双向链表]]></title>
      <url>/2017/07/15/JavaScript%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>经过上次的单向链表的讲解，大家可能对链表这种数据结构有了一定的理解，今天要讲的是有关JavaScript双向链表的基本介绍。<br>有关单向链表的基础知识请参考我的博客<a href="http://godlikemeteor.com/2017/07/11/JavaScript%20%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/" target="_blank" rel="external">JavaScript 单向链表</a></p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="新建一个链表"><a href="#新建一个链表" class="headerlink" title="新建一个链表"></a>新建一个链表</h3><p>双向链表跟单向链表的节点结构不同之处就是双向链表有一个前驱，这就需要我们构建一个指向前一个节点的指针。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">    this.previous = null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就如单向链表一样创建一个链表。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);       //建立链表的头节点</div><div class="line">    this.find = find;                   //查找指定节点</div><div class="line">    this.insert = insert;               //插入节点</div><div class="line">    this.display = display;             //显示所有节点</div><div class="line">    this.findLast = findLast;           //查找最后一个节点</div><div class="line">    this.remove = remove;               //删除指定节点</div><div class="line">    this.disReverse = disReverse;       //链表的反序排列</div><div class="line">    this.findPrevious = findPrevious;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个链表的基本结构就建好了，接下来我们需要通过一系列的功能测试这个链表。</p>
<h3 id="实现链表的查找功能"><a href="#实现链表的查找功能" class="headerlink" title="实现链表的查找功能"></a>实现链表的查找功能</h3><p>就如单向链表一样，需要我们调用链表的查找函数 find()。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var findNode = this.head;           </div><div class="line">    <span class="keyword">while</span>(findNode.element!=item)&#123;      </div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找函数的参数就是链表的内容，即element。</p>
<h3 id="实现链表的插入功能"><a href="#实现链表的插入功能" class="headerlink" title="实现链表的插入功能"></a>实现链表的插入功能</h3><p>查找的目的不仅仅是创建一个链表，你也可以通过查找函数确定链表内数据是否正确，接下来需要实现的就是我们的插入函数 insert() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement); //创建一个新的节点</div><div class="line">    var beforeNode = this.find(item);   //寻找想插入的前一个元素</div><div class="line">    <span class="keyword">if</span>(beforeNode.next!=null)&#123;</div><div class="line">        newNode.next = beforeNode.next;     //新创建节点的指针复制</div><div class="line">        beforeNode.next.previous = newNode; //将新创建节点下一个节点指向新创建的节点</div><div class="line">        beforeNode.next = newNode;          //将前一个节点的指针指向新创建的节点</div><div class="line">        newNode.previous = beforeNode;      //将新建节点的前驱指向上一个节点</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        newNode.next = beforeNode.next;     //新创建节点的指针复制</div><div class="line">        beforeNode.next = newNode;          //将前一个节点的指针指向新创建的节点</div><div class="line">        newNode.previous = beforeNode;      //将新建节点的前驱指向上一个节点</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>newElement是你想要插入节点的内容，而item是你想要插入节点的前一个节点的内容。</p>
<h3 id="实现链表的显示功能"><a href="#实现链表的显示功能" class="headerlink" title="实现链表的显示功能"></a>实现链表的显示功能</h3><p>通过查找前一个节点，就可以实现在指定节点后插入节点的操作了。接下来检验我们的函数是否可用，就需要调用我们的显示函数 display() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     </div><div class="line">        console.log(findNode.next.element);</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>display() 需要在Google console 中调用，通过调用你会发现建立了一个完整的链表结构，而且可以随心所欲的更改链表的数据了。</p>
<h3 id="实现链表的删除功能"><a href="#实现链表的删除功能" class="headerlink" title="实现链表的删除功能"></a>实现链表的删除功能</h3><p>链表的删除功能其实就是将链表的指针指向下下个节点上，因为浏览器的缓存特性，浏览器会自动清除无用的节点，这样便实现了链表节点的删除，但在删除节点之前我们需要找到删除的节点的前一个节点，然后改变指针就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(findNode.next.element!=item)&#123;  </div><div class="line">        findNode =findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到前一个节点，就可以实现我们的删除操作了，删除需要 remove() 函数实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var findNode = this.findPrevious(item);//找到删除节点的前一个节点</div><div class="line">    <span class="keyword">if</span>(findNode.next.next!=null)&#123;</div><div class="line">        findNode.next = findNode.next.next;    //将删除节点之后的节点向前移位</div><div class="line">        findNode.next.next.previous = findNode;//将删除节点的前指针指向删除节点的前一个节点，浏览器自动清除无用的节点</div><div class="line">    &#125;      </div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        findNode.next = findNode.next.next;    //将删除节点之后的节点向前移位</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们可以使用 display() 函数调用，就可以发现已经可以实现功能了。</p>
<h3 id="实现链表的反序排序功能"><a href="#实现链表的反序排序功能" class="headerlink" title="实现链表的反序排序功能"></a>实现链表的反序排序功能</h3><p>双向链表区别于单向链表最重要的功能就是反向排序，反向排序需要我们找到最后一个节点，然后通过前驱依次遍历，首先我们需要 findLast() 实现查找最后一个节点。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">findLast</span></span>()&#123;</div><div class="line">    var findNode = this.head;            //找到表头</div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     //查找是否节点的后驱指针为空</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后直接调用排序函数就可以实现链表的反向排序输出了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">disReverse</span></span>()&#123;</div><div class="line">    var findNode = this.head;</div><div class="line">    findNode = this.findLast();</div><div class="line">    <span class="keyword">while</span>(!(findNode.previous == null))&#123;</div><div class="line">        console.log(findNode.element);</div><div class="line">        findNode = findNode.previous;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这次讲解是不是对链表这种数据结构产生了兴趣？接下来还会推出有关循环链表的博客，也会给大家讲一个小游戏，敬请期待！</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你不得不知道的Git命令]]></title>
      <url>/2017/07/12/%E4%BD%A0%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>GitHub是一个通过Git进行版本控制的软件源代码托管服务，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。</p>
<p>GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，但是付费账户还可以创建私有的代码仓库。根据在2009年的Git用户调查，GitHub是最流行的Git访问站点。除了允许个人和组织创建和访问保管中的代码以外，它也提供了一些方便社会化共同软件开发的功能，即一般人口中的社区功能，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动和bug提出评论等。GitHub也提供了图表功能，用于概观显示开发者们怎样在代码库上工作以及软件的开发活跃程度。</p>
<p>经过几天的博客搭建，终于搭好了自己的博客，在这个过程中我也发现有一些Git指令不是特别会写，所以查阅了很多资料，总结在这里，也作为一些参考。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></div><div class="line">git config --global user.name <span class="string">"xxx"</span>                       <span class="comment"># 配置用户名</span></div><div class="line">git config --global user.email <span class="string">"xxx@xxx.com"</span>              <span class="comment"># 配置邮件</span></div><div class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></div><div class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></div><div class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></div><div class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></div><div class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></div><div class="line">git commit -m <span class="string">'xxx'</span>                                       <span class="comment"># 提交</span></div><div class="line">git commit --amend -m <span class="string">'xxx'</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></div><div class="line">git commit -am <span class="string">'xxx'</span>                                      <span class="comment"># 将add和commit合为一步</span></div><div class="line">git rm xxx                                                <span class="comment"># 删除index中的文件</span></div><div class="line">git rm -r *                                               <span class="comment"># 递归删除</span></div><div class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 显示提交日志</span></div><div class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></div><div class="line">git <span class="built_in">log</span> -5</div><div class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></div><div class="line">git <span class="built_in">log</span> -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></div><div class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></div><div class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></div><div class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></div><div class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></div><div class="line">git tag -a v2.0 -m <span class="string">'xxx'</span>                                  <span class="comment"># 增加v2.0的tag</span></div><div class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></div><div class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></div><div class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></div><div class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></div><div class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></div><div class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></div><div class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></div><div class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></div><div class="line">git branch                                                <span class="comment"># 显示本地分支</span></div><div class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></div><div class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></div><div class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></div><div class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></div><div class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></div><div class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></div><div class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></div><div class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></div><div class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></div><div class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></div><div class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></div><div class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></div><div class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></div><div class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></div><div class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></div><div class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></div><div class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></div><div class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></div><div class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></div><div class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></div><div class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></div><div class="line">git mv README README2                                     <span class="comment"># 重命名文件README为README2</span></div><div class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></div><div class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></div><div class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></div><div class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></div><div class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></div><div class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></div><div class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></div><div class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></div><div class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></div><div class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">'%h %s'</span> --graph                   <span class="comment"># 图示提交日志</span></div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></div><div class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></div><div class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></div><div class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></div><div class="line">git grep <span class="string">"delete from"</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></div><div class="line">git grep -e <span class="string">'#define'</span> --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 单向链表]]></title>
      <url>/2017/07/11/JavaScript%20%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>欢迎大家来到我的博客，这是我的第一篇技术性博客，今天给大家讲解有关于JavaScript单向链表的建立和操作过程，希望大家能够从中收获到知识，我也会定期更新自己所学的知识到这个博客上。</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="新建一个链表"><a href="#新建一个链表" class="headerlink" title="新建一个链表"></a>新建一个链表</h3><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。JavaScript中的单向链表也是如此，建立一个链表我们首先先要建立一个最基础的属性：节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为JavaScript是一种弱类型的语言，所以使用函数定义节点，而next即为节点的指针，接下来就要创建我们的链表了，但是光有链表还不够，还需要一些链表的操作，添加节点的查找、插入、显示和删除四个功能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);       </div><div class="line">    this.find = find;                   </div><div class="line">    this.insert = insert;               </div><div class="line">    this.display = display;             </div><div class="line">    this.findPrevious = findPrevious;   </div><div class="line">    this.remove = remove;               </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个链表的基本结构就建好了，接下来我们需要通过一系列的功能测试这个链表</p>
<h3 id="实现链表的查找功能"><a href="#实现链表的查找功能" class="headerlink" title="实现链表的查找功能"></a>实现链表的查找功能</h3><p>尽管已经建立出一个链表，但是因为这个链表只包含一个头节点，所以我们要插入自己想要的数据，但是如何确定插入元素在什么位置上呢？这就需要我们调用链表的查找函数 find() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var findNode = this.head;           </div><div class="line">    <span class="keyword">while</span>(findNode.element!=item)&#123;      </div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找函数的参数就是链表的内容，即element。</p>
<h3 id="实现链表的插入功能"><a href="#实现链表的插入功能" class="headerlink" title="实现链表的插入功能"></a>实现链表的插入功能</h3><p>查找的目的不仅仅是创建一个链表，你也可以通过查找函数确定链表内数据是否正确，接下来需要实现的就是我们的插入函数 insert() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement);  </div><div class="line">    var beforeNode = this.find(item);    </div><div class="line">    newNode.next = beforeNode.next;      </div><div class="line">    beforeNode.next = newNode;           </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>newElement是你想要插入节点的内容，而item是你想要插入节点的前一个节点的内容。</p>
<h3 id="实现链表的显示功能"><a href="#实现链表的显示功能" class="headerlink" title="实现链表的显示功能"></a>实现链表的显示功能</h3><p>通过查找前一个节点，就可以实现在指定节点后插入节点的操作了。接下来检验我们的函数是否可用，就需要调用我们的显示函数 display() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     </div><div class="line">        console.log(findNode.next.element);</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>display() 需要在Google console 中调用，通过调用你会发现建立了一个完整的链表结构，而且可以随心所欲的更改链表的数据了。</p>
<h3 id="实现链表的删除功能"><a href="#实现链表的删除功能" class="headerlink" title="实现链表的删除功能"></a>实现链表的删除功能</h3><p>链表的删除功能其实就是将链表的指针指向下下个节点上，因为浏览器的缓存特性，浏览器会自动清除无用的节点，这样便实现了链表节点的删除，但在删除节点之前我们需要找到删除的节点的前一个节点，然后改变指针就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(findNode.next.element!=item)&#123;  </div><div class="line">        findNode =findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到前一个节点，就可以实现我们的删除操作了，删除需要 remove() 函数实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var findNode = this.findPrevious(item);  </div><div class="line">    findNode.next = findNode.next.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们可以使用 display() 函数调用，就可以发现已经可以实现功能了，这是最基本的链表操作，接下来还会推出有关双向链表等博客，谢谢大家支持！</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生若只如初见]]></title>
      <url>/2017/07/09/%E4%BA%BA%E7%94%9F%E8%8B%A5%E5%8F%AA%E5%A6%82%E5%88%9D%E8%A7%81/</url>
      <content type="html"><![CDATA[<p>“人生若只如初见”，清代词人纳兰性德的这句诗词几乎无人不念，无人不爱，这句诗词无论在哪里出现，哪里游走，它都是那么的入心入眼，带给人无限绕指柔的情愫。毋庸置疑，“人生若只如初见”这飘渺出尘的七个字一定是惊艳了无数人的时光，也温柔了无数人的岁月。</p>
<p>红尘太多美丽的初见，宛若人间四月天，它不仅有花开的嫣然，也有花香的萦绕；它不仅有诗情的浮动，也有诗意的摇曳。只是，如果人生只如初见，那么人间也就不会有《钗头凤》的千年绝唱；如果人生只如初见，那么世上也就不会有梁祝化蝶飞的千古传奇；如果人生只如初见，那么凡尘也就不会有雷峰塔的千年喟叹。</p>
<p>行走在光阴里的人，谁不对初见怀揣一份美好向往和期待？谁不对初见心存一份眷恋和不舍？假如人生是一场途经，初见一定是人生路上最美的绽放。人生在世，不管你是青丝如云，还是白发如霜，当你念及“人生若只如初见”时，你的嘴角一定会不由自主地泛起一抹淡淡的笑意，你的内心一定会情不自禁地漾开一弯涟漪。</p>
<p>一次萍聚，让多少午夜梦回，衣袖盈香？一次邂逅，让多少暗香浮动，刹那芳华？一份爱情，从开始到结束，初见，永远是最美丽的风景；一个故事，从上演到谢幕，初见，永远是最难忘的情节。初见，它可以是朦胧到极致，又可以是清晰到极致的画面；初见，它可以是淡雅到极致，又可以浓烈到极致的情愫。人生来去，虽然初见只是惊鸿一瞥，昙花一现，但它总是让人朝思暮想，念念不忘。</p>
<p>从古至今，人生遗憾的事，莫过于故事还未开始就已结束；人生痛苦的事，莫过于故事未完主角就已匆匆离场；人生悲哀的事，莫过于故事还在继续悲剧就已注定。缘来缘去，若一切如初见那该有多美妙、多幸福，若相看两不厌那该有多难得、多可贵。</p>
<p>岁月的经筒不停地摇转，假如世人能在懂得里皈依，那么，无论在叶落花谢的日子，还是在丰盈晴好的时光，人与人遇见时心里就能轻言一句：“哦，原来你也在这里”，人与人分离时便能挥手轻道一声：“你若安好，便是晴天”。</p>
<p>红尘的初识里，总有许多是花开的惊喜；人间的离别里，总有许多是花落的悲哀。其实，人世间所有的爱恨痴缠都注定是彼此生命里的一程风雨、一道风景、一个故事。若是无缘，也许某些曾经便会在心灵深处印刻成遗憾和忧伤；若是有缘，一切的交集便能在流年的脉络里蜕变成旖旎和慈悲。</p>
<p>人生若只如初见，隔山隔水的守望里，三千青丝将不再有凌乱的飞扬，飘飘的衣衫上将不再有苦泪千行。人生若只如初见，纵然擦肩，也不会只成陌路；纵然转身，也不会只剩空无。人生若只如初见，美丽的风景将一直在路上，凡尘的烟火就会陪伴爱的故事走到地老天荒，途经的四季便不会在风中枯瘦。人生若只如初见，所有的相思都将美到落泪，所有的日子都将活色生香。</p>
<p>此生的来去，有人催开了十里桃花，带来了人间四月天，为平庸的生命增添了不凡和曼妙；有人覆灭了一路灯盏，带来了波折和黑暗，让平静的世界沾染了怨恨和薄情。似水流年里，不管红颜抑或白发，不管青春抑或暮年，从初遇到离别，无论恨或不恨，都是对生命过往的记载；从初见到熟识，无论爱或不爱，都是对时间留白的成全。</p>
<p>丹青为谁美，人生几壶泪？这世上，有一种珍惜永远胜过次第花开，有一种懂得永远胜过繁花似锦。烟雨红尘，每个人都是因爱而降临人间，愿只愿，有爱之人不染孤身葬花的悲凉，有情之人能有与之偕老的欢喜。愿只愿，天上人间，永远花开是画，花落成诗。</p>
<p>烟火流年，如梦翩跹。人生若只如初见，手中无花也生香，心中无声亦深情。不管生命是一场美丽之约，还是凄苦之旅，请与初心常相伴，且与真情共白首。任时光流转，永远眼中有风月，心中有诗情，守一处花开，拥一份清欢。</p>
]]></content>
      
        <categories>
            
            <category> 文章阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> 美文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/11/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 搭建博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
