<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Godlike Meteor</title>
    <link>http://www.godlikemeteor.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>能被JS改写的终将被JS改写</description>
    <pubDate>Mon, 17 Jul 2017 01:26:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JavaScript 树</title>
      <link>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/</link>
      <guid>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/</guid>
      <pubDate>Mon, 17 Jul 2017 00:18:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;树的定义&quot;&gt;&lt;a href=&quot;#树的定义&quot; class=&quot;headerlink&quot; title=&quot;树的定义&quot;&gt;&lt;/a&gt;树的定义&lt;/h2&gt;&lt;p&gt;在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br>1.每个节点有零个或多个子节点；<br>2.没有父节点的节点称为根节点；<br>3.每一个非根节点有且只有一个父节点；<br>4.除了根节点外，每个子节点可以分为多个不相交的子树。</p>
<h2 id="JavaScript树的结构"><a href="#JavaScript树的结构" class="headerlink" title="JavaScript树的结构"></a>JavaScript树的结构</h2><p>今天我们要讲的是排序二叉树的JavaScript实现，首先，排序二叉树的节点跟我们双向链表的节点很像，都有两个指针，不同的是，它的指针指向的是它的左孩子和右孩子，具体实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element,leftChild,rightChild)&#123;     //传入节点的值，左右指针</div><div class="line">    this.data = element;</div><div class="line">    this.leftChild = leftChild;</div><div class="line">    this.rightChild = rightChild;</div><div class="line">    this.show = show;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;                                  //显示节点的值</div><div class="line">    <span class="built_in">return</span> this.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们就要实现树这种数据结构了，每次我们要新建一个树都需要新建一个根节点让其指向<code>null</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BST</span></span>()&#123;</div><div class="line">    this.root = null;</div><div class="line">    this.insert = insert;             //插入节点</div><div class="line">    this.maxValue = maxValue;         //寻找树中的最大值</div><div class="line">    this.minValue = minValue;         //寻找树中的最小值</div><div class="line">    this.find = find;                 //寻找树中的某个值</div><div class="line">    this.preOrder = preOrder;         //前序遍历</div><div class="line">    this.inOrder = inOrder;           //中序遍历</div><div class="line">    this.postOrder = postOrder;       //后序遍历</div><div class="line">    this.remove = remove;             //删除某个节点</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们要实现的就是树的节点的插入，这需要我们调用<code>insert()</code>函数了。</p>
<h3 id="节点的插入"><a href="#节点的插入" class="headerlink" title="节点的插入"></a>节点的插入</h3><p>节点的插入方法有两种，一种是递归方法插入节点，另外一种是非递归的方法插入节点，这里我采用的是非递归的方法，尽管对内存占用比较大，但是有助于新手的理解，插入的时候要判定树中是否有节点，没有的话直接变成根节点；如果有节点，循环查找，若比节点小往左走，比节点大往右走，直到往左走遇到空或者往右走遇到空直接插入节点即可，具体编码实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//插入</div><div class="line"><span class="keyword">function</span> insert(element)&#123;</div><div class="line">    var node = new Node(element,null,null);</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        this.root = node;                 //让节点变成根节点</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;            //记录根节点的位置</div><div class="line">        var parents;                     //记录你找的节点的父节点的位置</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            parents = copy;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;     //如果小就往左走</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.leftChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                copy = copy.rightChild;   //如果大就往右走</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.rightChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是简单的非递归调用了，接下来我们来试试查找一下我们的树中的节点。</p>
<h3 id="节点的查找"><a href="#节点的查找" class="headerlink" title="节点的查找"></a>节点的查找</h3><p>节点的查找分为三类：查找树中的最大值，查找树中的最小值，查找树中的某个值。查找的思路很简单，查找树中的某个值就跟插入函数很像，只不过插入函数找到某个节点后插入，而查找只需要返回就行了。查找树中的最大值也很简单，一直找根节点的<code>rightChild</code>直到为空，即为最大值，最小值同理，具体代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">//查找最大值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">maxValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.rightChild != null)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找最小值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">minValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.leftChild != null)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找某个值，返回节点</div><div class="line"><span class="keyword">function</span> find(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取节点。"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                console.log(copy);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写的比较麻烦使让每一步尽可能的清晰，相对于递归调用跟容易理解问题。接下来就轮到我们的遍历问题了。</p>
<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="什么是树的遍历"><a href="#什么是树的遍历" class="headerlink" title="什么是树的遍历"></a>什么是树的遍历</h3><p>在计算机科学里，树的遍历（也称为树的搜索）是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有节点的过程。具体的访问操作可能是检查节点的值、更新节点的值等。不同的遍历方式，其访问节点的顺序是不一样的。以下虽然描述的是二叉树的遍历算法，但它们也适用于其他树形结构。</p>
<h3 id="遍历的种类"><a href="#遍历的种类" class="headerlink" title="遍历的种类"></a>遍历的种类</h3><p>与那些基本上都有标准遍历方式（通常是按线性顺序）的线性数据结构（如链表、一维数组）所不同的是，树结构有多种不同的遍历方式。从二叉树的根节点出发，节点的遍历分为三个主要步骤：对当前节点进行操作（称为“访问”节点）、遍历左边子节点、遍历右边子节点。这三个步骤的先后顺序也是不同遍历方式的根本区别。</p>
<p>由于从给定的某个节点出发，有多个可以前往的下一个节点（树不是线性数据结构），所以在顺序计算（即非并行计算）的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO)或队列（FIFO）。由于树本身是一种自我引用（即递归定义）的数据结构，因此很自然也可以用递归方式，或者更准确地说，用corecursion，来实现延迟节点的保存。这时（采用递归的情况）这些节点被保存在call stack中。</p>
<p>遍历方式的命名，源于其访问节点的顺序。最简单的划分：是深度优先（先访问子节点，再访问父节点，最后是第二个子节点）？还是广度优先（先访问第一个子节点，再访问第二个子节点，最后访问父节点）？ 深度优先可进一步按照根节点相对于左右子节点的访问先后来划分。如果把左节点和右节点的位置固定不动，那么根节点放在左节点的左边，称为前序（pre-order）、根节点放在左节点和右节点的中间，称为中序（in-order）、根节点放在右节点的右边，称为后序（post-order）。对广度优先而言，遍历没有前序中序后序之分：给定一组已排序的子节点，其“广度优先”的遍历只有一种唯一的结果。</p>
<h3 id="JavaScript实现树的遍历"><a href="#JavaScript实现树的遍历" class="headerlink" title="JavaScript实现树的遍历"></a>JavaScript实现树的遍历</h3><p>根据上面的结构设计，我们要实现树的前序遍历，中序遍历和后序遍历。这里我们用递归实现，非常简单，只需要四行代码即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//前序排序</div><div class="line"><span class="keyword">function</span> preOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        console.log(node.show());        //根</div><div class="line">        preOrder(node.leftChild);        //左子树</div><div class="line">        preOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//中序排序</div><div class="line"><span class="keyword">function</span> inOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        inOrder(node.leftChild);        //左子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">        inOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//后序排序</div><div class="line"><span class="keyword">function</span> postOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        postOrder(node.leftChild);      //左子树</div><div class="line">        postOrder(node.rightChild);     //右子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="树节点的删除"><a href="#树节点的删除" class="headerlink" title="树节点的删除"></a>树节点的删除</h2><h3 id="删除的算法"><a href="#删除的算法" class="headerlink" title="删除的算法"></a>删除的算法</h3><p>接下来就是最考验脑力的删除操作了，因为在删除的过程中，你要考虑到不同的情况，针对每一种不同的情况，你要有针对性的反应和调整。树的删除具体分为五种情况和三个步骤：</p>
<p>1）判断参数的合法性，判断参数是否在当前的二叉树当中<br>2）删除的节点是根节点，此时应该怎么调整<br>3）删除的节点是普通节点，此时又应该怎么调整</p>
<p>情况一：删除的节点是根节点【即步骤二】<br>情况二：删除的节点是叶子节点<br>情况三：删除的节点只有左孩子没有右孩子<br>情况四：删除的节点只有右孩子没有左孩子<br>情况五：删除的节点既有左孩子也有右孩子</p>
<p>下面直接贴代码进行讲解：【为了更清晰的展示五种情况，将根单独列出来】</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无需删除节点。"</span>)                        //如果树为空，</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;                                            //删除节点的寻找</div><div class="line">        var parents;</div><div class="line">        var findNode;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                findNode = copy;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(findNode == this.root)&#123;                                  //删除节点为根节点判断四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                findNode = null;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                findNode.data = findNode.rightChild.data;</div><div class="line">                findNode.rightChild = findNode.rightChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.rightChild.leftChild; </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                findNode.data = findNode.leftChild.data;</div><div class="line">                findNode.rightChild = findNode.leftChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.leftChild.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var code = findNode.leftChild;</div><div class="line">                var studio;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(code.rightChild != null)&#123;</div><div class="line">                        studio = code;</div><div class="line">                        code = code.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    findNode.leftChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    studio.rightChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;                                                        // 不是根节点的四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = null;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = null;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var Chrome = findNode.leftChild;</div><div class="line">                var Google;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(Chrome.rightChild != null)&#123;</div><div class="line">                        Google = Chrome;</div><div class="line">                        Chrome = Chrome.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = Chrome.data;         //千万要记住只有一个左孩子的情况，我就错在这里了，报错的是rightChild undefined</div><div class="line">                    findNode.leftChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = Chrome.data;</div><div class="line">                    Google.rightChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天的资料就分享到这里，接下来我还会持续更新所学的。谢谢大家。</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用JavaScript实现中缀表达式计算器【1.0】</title>
      <link>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
      <guid>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
      <pubDate>Sun, 16 Jul 2017 12:16:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;学习了栈结构，你以为学完了栈？今天要讲的是中缀表达式转后缀表达式，后缀表达式的计算和中缀表达式的计算，接下来让我们开始吧！&lt;/p&gt;
&lt;h2 id=&quot;什么是中缀表达式和后缀表达式？&quot;&gt;&lt;a href=&quot;#什么是中缀表达式和后缀表达式？&quot; class=&quot;headerlink&quot; 
      
      </description>
      
      <content:encoded><![CDATA[<p>学习了栈结构，你以为学完了栈？今天要讲的是中缀表达式转后缀表达式，后缀表达式的计算和中缀表达式的计算，接下来让我们开始吧！</p>
<h2 id="什么是中缀表达式和后缀表达式？"><a href="#什么是中缀表达式和后缀表达式？" class="headerlink" title="什么是中缀表达式和后缀表达式？"></a>什么是中缀表达式和后缀表达式？</h2><p>中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）。与前缀表达式（例：+ 3 4）或后缀表达式（例：3 4 +）相比，中缀表达式不容易被电脑解析，但仍被许多程序语言使用，因为它符合人们的普遍用法。<br>与前缀或后缀记法不同的是，中缀记法中括号是必需的。计算过程中必须用括号将操作符和对应的操作数括起来，用于指示运算的次序。</p>
<p>后缀表示法 (逆波兰表示法)（Reverse Polish notation，RPN，或逆波兰记法），是一种是由波兰数学家扬·武卡谢维奇1920年引入的数学表达式方式，在逆波兰记法中，所有操作符置于操作数的后面，因此也被称为后缀表示法。逆波兰记法不需要括号来标识操作符的优先级。</p>
<p>逆波兰记法中，操作符置于操作数的后面。例如表达“三加四”时，写作“3 4 +”，而不是“3 + 4”。如果有多个操作符，操作符置于第二个操作数的后面，所以常规中缀记法的“3 - 4 + 5”在逆波兰记法中写作“3 4 - 5 +”：先3减去4，再加上5。使用逆波兰记法的一个好处是不需要使用括号。例如中缀记法中“3 - 4 <em> 5”与“（3 - 4）</em>5”不相同，但后缀记法中前者写做“3 4 5 <em> -”，无歧义地表示“3 (4 5 </em>) -”；后者写做“3 4 - 5 *”。<br>逆波兰表达式的解释器一般是基于堆栈的。解释过程一般是：操作数入栈；遇到操作符时，操作数出栈，求值，将结果入栈；当一遍后，栈顶就是表达式的值。因此逆波兰表达式的求值使用堆栈结构很容易实现，并且能很快求值。</p>
<p>首先我们要进行的就是中缀表达式和后缀表达式的转换。开始吧！</p>
<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><p>首先让我们来了解一下有关中缀转后缀的算法，大概有以下几个规则：<br>(1)当读到数字直接送至输出队列中；<br>(2)当读到运算符t时：<br>    a.将栈中所有优先级高于或等于t的运算符弹出，送到输出队列中；<br>　  b.t进栈；<br>(3)读到左括号时总是将它压入栈中；<br>(4)读到右括号时，将靠近栈顶的第一个左括号上面的运算符全部依次弹出，送至输出队列后，再丢弃左括号；<br>(5)中缀表达式全部读完后，若栈中仍有运算符，将其送到输出队列中。 </p>
<h3 id="符号的优先级"><a href="#符号的优先级" class="headerlink" title="符号的优先级"></a>符号的优先级</h3><p>首先我们必须知道有关运算符优先级的问题，经过查阅，我们可以得到如下二维数组。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var sign = new Array();</div><div class="line">                    // +   -   *    /    (    )   <span class="comment">#</span></div><div class="line">sign[0] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //+</div><div class="line">sign[1] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //-</div><div class="line">sign[2] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     //*</div><div class="line">sign[3] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     ///</div><div class="line">sign[4] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'0'</span>,<span class="string">''</span>);  //(</div><div class="line">sign[5] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">''</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);       //)</div><div class="line">sign[6] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">''</span>,<span class="string">'0'</span>);  //<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>先找横行，代表栈中的运算符，再找纵行，代表你想要比较的运算符，<code>1</code>代表栈中符号优先级小于栈外符号优先级，栈外符号入栈；<code>-1</code>代表栈中符号优先级大于栈外符号优先级，栈中符号弹出，直到栈中符号优先级比栈外符号小，栈外符号入栈；<code>0</code>代表优先级一样，暂时不进行考虑。</p>
<h3 id="符号的比较函数"><a href="#符号的比较函数" class="headerlink" title="符号的比较函数"></a>符号的比较函数</h3><p>弄清楚符号的优先级，我们就可以对两个符号进行比较，具体实现代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Sign(a,b)&#123;</div><div class="line">    var str = [<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'#'</span>];</div><div class="line">    var str1;</div><div class="line">    var str2;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;7;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a == str[i])&#123;</div><div class="line">            str1 = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(b == str[i])&#123;</div><div class="line">            str2 = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var count = sign[str1][str2];</div><div class="line">    <span class="built_in">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将符号关系转换为数字更有利于我们之后的判断，接下来就是我们的正题来了。</p>
<h3 id="构造一个栈"><a href="#构造一个栈" class="headerlink" title="构造一个栈"></a>构造一个栈</h3><p>跟上一篇一样，我们需要构造一个基本的数据结构—-栈，来实现这个项目，不同的是，我们新增加了一个函数<code>peek()</code>来获取栈顶的第一个元素。下面是代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Stack</span></span>()&#123;</div><div class="line">    this.dataStore = [];</div><div class="line">    this.top = 0;</div><div class="line">    this.push = push;</div><div class="line">    this.pop = pop;</div><div class="line">    this.length = length;</div><div class="line">    this.peek = peek;</div><div class="line">    this.clear = clear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> push(element)&#123;</div><div class="line">    this.dataStore[this.top] = element;</div><div class="line">    this.top++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">pop</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[--this.top];;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">peek</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[this.top-1];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">clear</span></span>()&#123;</div><div class="line">    this.top = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">length</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造好一个栈之后，我们就需要进行最重要的步骤了，构造转换函数。</p>
<h3 id="中缀表达式转换函数"><a href="#中缀表达式转换函数" class="headerlink" title="中缀表达式转换函数"></a>中缀表达式转换函数</h3><p>中缀表达式转后缀表达式跟C语言不同，JavaScript是一种弱类型语言，它的实现更加的灵活，首先我们在栈中先压入<code>#</code>，令最后一个元素能够弹出，然后我们构造如下函数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Change(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();                       //构造一个栈</div><div class="line">    stack.push(<span class="string">"#"</span>);                               //将<span class="comment">#压入栈中</span></div><div class="line">    var outStack = new Array();                    //构造一个队列</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;       //如果是数字或者小数点进入循环</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));    //将整个字符串转换成小数数值后入队</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;              //遇到左括号直接入栈</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;         //遇到右括号将栈中左括号之前的符号全部弹出入队，然后删去左括号</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;</div><div class="line">                    outStack.push(stack.pop());</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;                            //两个符号判断关系，选择入队或弹出操作</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        outStack.push(stack.pop());</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就可以输入中缀表达式进行计算了，注意在控制台计算的时候在中缀表达式的后面加一个#号，防止栈内符号未完全弹出的情况出现。</p>
<p>测试实例：<code>Change(&#39;1+2*(3-1+2)-3#&#39;);</code><br>示例输出：<code>1231-2+*+3-</code> 注意，输出的是一个队，也就是一个数组，本样例是为了方便这样测试的。</p>
<h2 id="后缀表达式的计算"><a href="#后缀表达式的计算" class="headerlink" title="后缀表达式的计算"></a>后缀表达式的计算</h2><p>相对于中缀表达式转后缀表达式，后缀表达式的计算就简单多了，直接上代码，在注释中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">ffunction suffix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var outStack = new Stack();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);                 //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var str1 = parseFloat(outStack.pop());     //遇到符号将栈顶的两个数字弹出</div><div class="line">            var str2 = parseFloat(outStack.pop());     //后弹出的在前，先弹出的在后进行运算</div><div class="line">            switch(str[i])&#123;</div><div class="line">                <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(str2 + str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(str2 - str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(str2 * str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(str2 / str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.peek());         //直到栈中只有一个数字，显示即可，就是本次的运算结果</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试实例：<code>suffix(&#39;1231-2+*+3-&#39;)</code><br>示例输出：<code>6</code><br>注意后缀表达式的计算无需将符号入栈，只需要弹出数字进行运算即可。</p>
<h2 id="中缀表达式的计算"><a href="#中缀表达式的计算" class="headerlink" title="中缀表达式的计算"></a>中缀表达式的计算</h2><p>中缀表达式的计算原理如果你理解了中缀转后缀、后缀运算那么很快你就能够理解，这个例子也是直接在代码中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Infix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();</div><div class="line">    stack.push(<span class="string">"#"</span>);                       //将<span class="comment">#字压入栈</span></div><div class="line">    var outStack = new Array();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);   //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;  //符号判断完不进行入栈操作，而是进行弹出运算</div><div class="line">                    var a1 = parseFloat(outStack.pop());</div><div class="line">                    var a2 = parseFloat(outStack.pop());</div><div class="line">                    var a3 = stack.pop();</div><div class="line">                    switch(a3)&#123;</div><div class="line">                        <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(a2 + a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(a2 - a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(a2 * a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(a2 / a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        var b1 = parseFloat(outStack.pop());</div><div class="line">                        var b2 = parseFloat(outStack.pop());</div><div class="line">                        var a3 = stack.pop();</div><div class="line">                        switch(a3)&#123;</div><div class="line">                            <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(b2 + b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(b2 - b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(b2 * b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(b2 / b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.pop().toFixed(5));   //将小数位数控制在5位小数，结束运算。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本代码可以自行尝试输出和输入，根据这个原理以及少许html和CSS的基础就能够写出相当不错的计算器，计算器的实现也会在下次进行贴出，我还会继续分享自己的所学，点波关注不迷路，谢谢！</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript 栈</title>
      <link>http://www.godlikemeteor.com/2017/07/16/JavaScript%20%E6%A0%88/</link>
      <guid>http://www.godlikemeteor.com/2017/07/16/JavaScript%20%E6%A0%88/</guid>
      <pubDate>Sun, 16 Jul 2017 11:48:02 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;什么是栈&quot;&gt;&lt;a href=&quot;#什么是栈&quot; class=&quot;headerlink&quot; title=&quot;什么是栈&quot;&gt;&lt;/a&gt;什么是栈&lt;/h2&gt;&lt;p&gt;堆栈（英语：stack），也可直接称栈（港澳台作堆叠），在计算机科学中，是一种特殊的串列形式的数据结构，它的特殊之处在于只能
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h2><p>堆栈（英语：stack），也可直接称栈（港澳台作堆叠），在计算机科学中，是一种特殊的串列形式的数据结构，它的特殊之处在于只能允许在链接串列或阵列的一端（称为堆叠顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或连结串列的形式来完成。堆叠的另外一个相对的操作方式称为伫列。</p>
<p>由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。</p>
<p>堆叠数据结构使用两种基本操作：推入（push）和弹出（pop）：<br>推入：将数据放入堆叠的顶端（阵列形式或串列形式），堆叠顶端top指标加一。<br>弹出：将顶端数据资料输出（回传），堆叠顶端资料减一。</p>
<h2 id="用JavaScript实现栈的数据结构"><a href="#用JavaScript实现栈的数据结构" class="headerlink" title="用JavaScript实现栈的数据结构"></a>用JavaScript实现栈的数据结构</h2><p>接下来我们就要使用JavaScript实现栈的数据结构，包含数据的推入和推出。</p>
<p>首先我们定义一个栈</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Stack</span></span>()&#123;</div><div class="line">    this.data = [];</div><div class="line">    this.top = 0;            //记录栈顶位置</div><div class="line">    this.pop = pop;          //右推出</div><div class="line">    this.push = push;        //右进入</div><div class="line">    this.display = display;</div><div class="line">    this.length = length;    //计算数组长度</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，top是用来记录栈顶位置，初始化为0，我们使用 <code>push()</code> 函数和 <code>pop()</code>函数来实现。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> push(element)&#123;</div><div class="line">    this.data[this.top] = element;</div><div class="line">    this.top++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">pop</span></span>()&#123;</div><div class="line">    var lastElement = this.data[this.top-1];</div><div class="line">    this.top--;</div><div class="line">    <span class="built_in">return</span> lastElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而<code>length()</code>函数和<code>display()</code>函数是用来显示栈长度和显示栈内元素的，下面展示函数的实现。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">length</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.top;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var length = this.top;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;length;i++)&#123;</div><div class="line">        console.log(this.data[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天讲的东西都十分基础，是为了接下来中缀表达式和后缀表达式实现打下基础，接下来的一篇博客中将详解中缀表达式的计算过程。</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/16/JavaScript%20%E6%A0%88/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript 循环链表 【约瑟夫斯问题】</title>
      <link>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <guid>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Sat, 15 Jul 2017 10:04:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;单向链表和双向链表学完之后，就学到了循环链表，循环链表其实比双向链表简单一点，就是将单向链表的表头和尾指针连接起来，因为跟单向链表很像，在这里我将通过一个小游戏讲解循环链表。&lt;/p&gt;
&lt;h3 id=&quot;约瑟夫斯问题&quot;&gt;&lt;a href=&quot;#约瑟夫斯问题&quot; class=&quot;head
      
      </description>
      
      <content:encoded><![CDATA[<p>单向链表和双向链表学完之后，就学到了循环链表，循环链表其实比双向链表简单一点，就是将单向链表的表头和尾指针连接起来，因为跟单向链表很像，在这里我将通过一个小游戏讲解循环链表。</p>
<h3 id="约瑟夫斯问题"><a href="#约瑟夫斯问题" class="headerlink" title="约瑟夫斯问题"></a>约瑟夫斯问题</h3><p>约瑟夫斯问题（有时也称为约瑟夫斯置换），是一个出现在计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。</p>
<p>有n个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。<br>问题是，给定了n和k，一开始要站在什么地方才能避免被处决？</p>
<p>经过改版，本游戏是通过输入总人数和杀人循环权来计算出一个循环链表中的最后一个节点，也就是最后一个幸存者的位置。</p>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>节点的数据结构实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环链表的实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);</div><div class="line">    this.head.next = this.head; //循环链表的实现</div><div class="line">    this.find = find;</div><div class="line">    this.insert = insert;</div><div class="line">    this.display = display;</div><div class="line">    this.findPrevious =findPrevious;</div><div class="line">    this.remove = remove;</div><div class="line">    this.findLast = findLast;</div><div class="line">    this.nodegame = nodegame;</div><div class="line">    this.kill = <span class="built_in">kill</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现链表的删除功能</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(!(currNode.next==null)&amp;&amp;(currNode.next.element != item))&#123;</div><div class="line">        currNode = currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> currNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var prevNode = this.findPrevious(item);</div><div class="line">    <span class="keyword">if</span>(!(prevNode.next==null))&#123;</div><div class="line">        curtNode = prevNode.next;</div><div class="line">        prevNode.next = prevNode.next.next;</div><div class="line">        curtNode = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链表的显示功能</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(!(currNode == null) &amp;&amp; !(currNode.next.element == <span class="string">'head'</span>))&#123;</div><div class="line">        console.log(currNode.next.element);</div><div class="line">        currNode =currNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>节点的查找</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(currNode.element!=item)&#123;</div><div class="line">        currNode =currNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> currNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement);</div><div class="line">    var current = this.find(item); </div><div class="line">    newNode.next = current.next;</div><div class="line">    current.next = newNode;</div><div class="line">    var lastNode = this.findLast();  </div><div class="line">        lastNode.next = this.head;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>杀人游戏的实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> nodegame(n,x)&#123;</div><div class="line">    var nNode = this.findLast();</div><div class="line">    <span class="keyword">for</span>(var i=1;i&lt;=n;i++)&#123;</div><div class="line">        this.insert(i,nNode.element);</div><div class="line">        nNode=nNode.next;</div><div class="line">    &#125;</div><div class="line">    this.kill(n,x);</div><div class="line">    var result = this.findLast().element;</div><div class="line">    this.head.next = this.head;</div><div class="line">    <span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="built_in">kill</span>(num,n)&#123;</div><div class="line">    var count=num-1;</div><div class="line">    var currNode = this.head;</div><div class="line">    <span class="keyword">while</span>(count)&#123;</div><div class="line">        <span class="keyword">for</span>(var i=0;i&lt;n;i++)&#123;</div><div class="line">            currNode=currNode.next;</div><div class="line">            <span class="keyword">if</span>(currNode==this.head)currNode=currNode.next;</div><div class="line">        &#125;</div><div class="line">        this.remove(currNode.element);</div><div class="line">        count--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var gal = new LList();</div><div class="line"><span class="keyword">function</span> game(playerNum,killNum)&#123;</div><div class="line">    <span class="built_in">return</span> gal.nodegame(playerNum,killNum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>特别感谢大佬，喜欢的戳这里→<a href="https://github.com/sokonen" target="_blank" rel="external">大佬</a>,今天的代码就分享到这里。</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript 双向链表</title>
      <link>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</link>
      <guid>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Sat, 15 Jul 2017 08:46:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;经过上次的单向链表的讲解，大家可能对链表这种数据结构有了一定的理解，今天要讲的是有关JavaScript双向链表的基本介绍。&lt;br&gt;有关单向链表的基础知识请参考我的博客&lt;a href=&quot;http://godlikemeteor.com/2017/07/11/JavaScri
      
      </description>
      
      <content:encoded><![CDATA[<p>经过上次的单向链表的讲解，大家可能对链表这种数据结构有了一定的理解，今天要讲的是有关JavaScript双向链表的基本介绍。<br>有关单向链表的基础知识请参考我的博客<a href="http://godlikemeteor.com/2017/07/11/JavaScript%20%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/" target="_blank" rel="external">JavaScript 单向链表</a></p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="新建一个链表"><a href="#新建一个链表" class="headerlink" title="新建一个链表"></a>新建一个链表</h3><p>双向链表跟单向链表的节点结构不同之处就是双向链表有一个前驱，这就需要我们构建一个指向前一个节点的指针。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element)&#123;</div><div class="line">    this.element = element;</div><div class="line">    this.next = null;</div><div class="line">    this.previous = null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就如单向链表一样创建一个链表。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">LList</span></span>()&#123;</div><div class="line">    this.head = new Node(<span class="string">"head"</span>);       //建立链表的头节点</div><div class="line">    this.find = find;                   //查找指定节点</div><div class="line">    this.insert = insert;               //插入节点</div><div class="line">    this.display = display;             //显示所有节点</div><div class="line">    this.findLast = findLast;           //查找最后一个节点</div><div class="line">    this.remove = remove;               //删除指定节点</div><div class="line">    this.disReverse = disReverse;       //链表的反序排列</div><div class="line">    this.findPrevious = findPrevious;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个链表的基本结构就建好了，接下来我们需要通过一系列的功能测试这个链表。</p>
<h3 id="实现链表的查找功能"><a href="#实现链表的查找功能" class="headerlink" title="实现链表的查找功能"></a>实现链表的查找功能</h3><p>就如单向链表一样，需要我们调用链表的查找函数 find()。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> find(item)&#123;</div><div class="line">    var findNode = this.head;           </div><div class="line">    <span class="keyword">while</span>(findNode.element!=item)&#123;      </div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找函数的参数就是链表的内容，即element。</p>
<h3 id="实现链表的插入功能"><a href="#实现链表的插入功能" class="headerlink" title="实现链表的插入功能"></a>实现链表的插入功能</h3><p>查找的目的不仅仅是创建一个链表，你也可以通过查找函数确定链表内数据是否正确，接下来需要实现的就是我们的插入函数 insert() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(newElement,item)&#123;</div><div class="line">    var newNode = new Node(newElement); //创建一个新的节点</div><div class="line">    var beforeNode = this.find(item);   //寻找想插入的前一个元素</div><div class="line">    <span class="keyword">if</span>(beforeNode.next!=null)&#123;</div><div class="line">        newNode.next = beforeNode.next;     //新创建节点的指针复制</div><div class="line">        beforeNode.next.previous = newNode; //将新创建节点下一个节点指向新创建的节点</div><div class="line">        beforeNode.next = newNode;          //将前一个节点的指针指向新创建的节点</div><div class="line">        newNode.previous = beforeNode;      //将新建节点的前驱指向上一个节点</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        newNode.next = beforeNode.next;     //新创建节点的指针复制</div><div class="line">        beforeNode.next = newNode;          //将前一个节点的指针指向新创建的节点</div><div class="line">        newNode.previous = beforeNode;      //将新建节点的前驱指向上一个节点</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>newElement是你想要插入节点的内容，而item是你想要插入节点的前一个节点的内容。</p>
<h3 id="实现链表的显示功能"><a href="#实现链表的显示功能" class="headerlink" title="实现链表的显示功能"></a>实现链表的显示功能</h3><p>通过查找前一个节点，就可以实现在指定节点后插入节点的操作了。接下来检验我们的函数是否可用，就需要调用我们的显示函数 display() 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">display</span></span>()&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     </div><div class="line">        console.log(findNode.next.element);</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>display() 需要在Google console 中调用，通过调用你会发现建立了一个完整的链表结构，而且可以随心所欲的更改链表的数据了。</p>
<h3 id="实现链表的删除功能"><a href="#实现链表的删除功能" class="headerlink" title="实现链表的删除功能"></a>实现链表的删除功能</h3><p>链表的删除功能其实就是将链表的指针指向下下个节点上，因为浏览器的缓存特性，浏览器会自动清除无用的节点，这样便实现了链表节点的删除，但在删除节点之前我们需要找到删除的节点的前一个节点，然后改变指针就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> findPrevious(item)&#123;</div><div class="line">    var findNode = this.head;            </div><div class="line">    <span class="keyword">while</span>(findNode.next.element!=item)&#123;  </div><div class="line">        findNode =findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到前一个节点，就可以实现我们的删除操作了，删除需要 remove() 函数实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(item)&#123;</div><div class="line">    var findNode = this.findPrevious(item);//找到删除节点的前一个节点</div><div class="line">    <span class="keyword">if</span>(findNode.next.next!=null)&#123;</div><div class="line">        findNode.next = findNode.next.next;    //将删除节点之后的节点向前移位</div><div class="line">        findNode.next.next.previous = findNode;//将删除节点的前指针指向删除节点的前一个节点，浏览器自动清除无用的节点</div><div class="line">    &#125;      </div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        findNode.next = findNode.next.next;    //将删除节点之后的节点向前移位</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们可以使用 display() 函数调用，就可以发现已经可以实现功能了。</p>
<h3 id="实现链表的反序排序功能"><a href="#实现链表的反序排序功能" class="headerlink" title="实现链表的反序排序功能"></a>实现链表的反序排序功能</h3><p>双向链表区别于单向链表最重要的功能就是反向排序，反向排序需要我们找到最后一个节点，然后通过前驱依次遍历，首先我们需要 findLast() 实现查找最后一个节点。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">findLast</span></span>()&#123;</div><div class="line">    var findNode = this.head;            //找到表头</div><div class="line">    <span class="keyword">while</span>(!(findNode.next == null))&#123;     //查找是否节点的后驱指针为空</div><div class="line">        findNode = findNode.next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> findNode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后直接调用排序函数就可以实现链表的反向排序输出了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">disReverse</span></span>()&#123;</div><div class="line">    var findNode = this.head;</div><div class="line">    findNode = this.findLast();</div><div class="line">    <span class="keyword">while</span>(!(findNode.previous == null))&#123;</div><div class="line">        console.log(findNode.element);</div><div class="line">        findNode = findNode.previous;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这次讲解是不是对链表这种数据结构产生了兴趣？接下来还会推出有关循环链表的博客，也会给大家讲一个小游戏，敬请期待！</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/15/JavaScript%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
