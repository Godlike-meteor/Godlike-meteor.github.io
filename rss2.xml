<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Godlike Meteor</title>
    <link>http://www.godlikemeteor.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>能被JS改写的终将被JS改写</description>
    <pubDate>Fri, 18 Jan 2019 09:00:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Vue.js源码解析随笔一</title>
      <link>http://www.godlikemeteor.com/2019/01/18/Vue-js%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E9%9A%8F%E7%AC%94%E4%B8%80/</link>
      <guid>http://www.godlikemeteor.com/2019/01/18/Vue-js%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E9%9A%8F%E7%AC%94%E4%B8%80/</guid>
      <pubDate>Fri, 18 Jan 2019 08:42:11 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Flow-基础&quot;&gt;&lt;a href=&quot;#Flow-基础&quot; class=&quot;headerlink&quot; title=&quot;Flow 基础&quot;&gt;&lt;/a&gt;Flow 基础&lt;/h1&gt;&lt;h2 id=&quot;认识Flow&quot;&gt;&lt;a href=&quot;#认识Flow&quot; class=&quot;headerlink&quot; 
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Flow-基础"><a href="#Flow-基础" class="headerlink" title="Flow 基础"></a>Flow 基础</h1><h2 id="认识Flow"><a href="#认识Flow" class="headerlink" title="认识Flow"></a>认识Flow</h2><p><a href="https://flow.org/en/docs/getting-started/" target="_blank" rel="external">Flow</a> 是 facebook 出品的 JavaScript 静态类型检查⼯具。Vue.js 的源码利⽤了 Flow 做了静态类型检查。</p>
<h2 id="Flow的工作方式"><a href="#Flow的工作方式" class="headerlink" title="Flow的工作方式"></a>Flow的工作方式</h2><p>通常类型检查分成 2 种⽅式：</p>
<blockquote>
<p><strong>类型推断</strong>：通过变量的使⽤上下⽂来推断出变量类型，然后根据这些推断来检查类型。<br><strong>类型注释</strong>：事先注释好我们期待的类型，Flow 会基于这些注释来判断。</p>
</blockquote>
<p>具体例子请移步Flow的<a href="https://flow.org/en/docs/types/" target="_blank" rel="external">官方文档</a></p>
<h2 id="Flow-在-Vue-js-源码中的应⽤"><a href="#Flow-在-Vue-js-源码中的应⽤" class="headerlink" title="Flow 在 Vue.js 源码中的应⽤"></a>Flow 在 Vue.js 源码中的应⽤</h2><p>在 Vue.js 的主⽬录下有 <code>.flowconfig</code> ⽂件， 它是 flow 的配置⽂件，这其中的 <code>libs</code> 部分⽤来描述包含指定库定义的⽬录，默认是名为 <code>flow-typed</code> 的⽬录。</p>
<p>这⾥ <code>libs</code> 配置的是 flow ，表⽰指定的库定义都在 flow ⽂件夹内。我们打开这个⽬录，会发<br>现⽂件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">flow</div><div class="line">├── compiler.js      # 编译相关</div><div class="line">├── global-api.js    # Global API 结构</div><div class="line">├── modules.js       # 第三⽅库定义</div><div class="line">├── options.js       # 选项相关</div><div class="line">├── ssr.js           # 服务端渲染相关</div><div class="line">├── vnode.js         # 虚拟 node 相关</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2019/01/18/Vue-js%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E9%9A%8F%E7%AC%94%E4%B8%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何在 Visual Studio Code 中优雅的写 MySQL</title>
      <link>http://www.godlikemeteor.com/2018/10/13/%E5%A6%82%E4%BD%95%E5%9C%A8-Visual-Studio-Code-%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99-MySQL/</link>
      <guid>http://www.godlikemeteor.com/2018/10/13/%E5%A6%82%E4%BD%95%E5%9C%A8-Visual-Studio-Code-%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99-MySQL/</guid>
      <pubDate>Sat, 13 Oct 2018 01:11:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;相信大家都对数据库有很多的理解，以前笔者经常用 &lt;code&gt;Navicat Premiun 12&lt;/code&gt; 进行数据库的编写，但是无奈样式和方法还有所不同，使用起来并不是很方便，所以笔者突发奇想有没有使用 &lt;code&gt;Visual Studio Code&lt;/code&gt; 
      
      </description>
      
      <content:encoded><![CDATA[<p>相信大家都对数据库有很多的理解，以前笔者经常用 <code>Navicat Premiun 12</code> 进行数据库的编写，但是无奈样式和方法还有所不同，使用起来并不是很方便，所以笔者突发奇想有没有使用 <code>Visual Studio Code</code> 编译MySQL数据库的能力呢？（Visual Studio Code 天下第一！）这不，笔者就带来这篇教程带你配置和在 <code>Visual Studio Code</code> 上运行MySQL数据库</p>
<h2 id="XAMPP"><a href="#XAMPP" class="headerlink" title="XAMPP"></a>XAMPP</h2><p>由于笔者在之前使用WAMP进行过简单的项目设计，所以笔者数据库选择的是集成环境xampp，它具有某些配置设置，可以在本地轻松开发。可以在<a href="https://www.apachefriends.org/index.html" target="_blank" rel="external">Xampp官方下载链接</a> 进行下载，直接点击下一步即可，本教程主要使用到xampp打开数据库的操作，直接点击start即可，可以看到数据库占用端口3306</p>
<p><img src="/images/shujvku1.jpg" alt=""></p>
<h2 id="Visual-Studio-Code-MYSQL-插件"><a href="#Visual-Studio-Code-MYSQL-插件" class="headerlink" title="Visual Studio Code MYSQL 插件"></a>Visual Studio Code MYSQL 插件</h2><p>接下来就配置 Visual Studio Code 的环境，使用插件搜索功能，搜索插件 MySQL并进行下载并且重启。</p>
<p><img src="/images/shujvku2.jpg" alt=""></p>
<h2 id="利用-Visual-Studio-Code-插件运行数据库"><a href="#利用-Visual-Studio-Code-插件运行数据库" class="headerlink" title="利用 Visual Studio Code 插件运行数据库"></a>利用 Visual Studio Code 插件运行数据库</h2><p>点击文件选项，注意最下方的MYSQL，点击“+”号进入MySQL配置</p>
<p><img src="/images/shujvku3.jpg" alt=""></p>
<p>依次输入数据库主机名，用户名，密码后登陆到数据库中<br>例: localhost [回车] root [回车]     [回车] ….    —-     用户名root 密码为空</p>
<p><img src="/images/shujvku4.jpg" alt=""></p>
<p><img src="/images/shujvku5.jpg" alt=""></p>
<p>在数据库中右击 点选 <code>NEW QUERY</code> 就可以写sql代码了，</p>
<p>运行数据库：右键 <code>*.sql</code> 文件，选择 <code>Run MYSQL Query</code> 运行，运行结果如下：</p>
<p><img src="/images/shujvku6.jpg" alt=""></p>
<p>好了今天的分享就到这里，谢谢大家</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2018/10/13/%E5%A6%82%E4%BD%95%E5%9C%A8-Visual-Studio-Code-%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99-MySQL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 Visual Studio Code 中运行C#项目</title>
      <link>http://www.godlikemeteor.com/2018/09/07/%E5%88%A9%E7%94%A8vscode%E7%BC%96%E5%86%99C-%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <guid>http://www.godlikemeteor.com/2018/09/07/%E5%88%A9%E7%94%A8vscode%E7%BC%96%E5%86%99C-%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <pubDate>Fri, 07 Sep 2018 13:08:29 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;在-Visual-Studio-Code-中运行C-项目&quot;&gt;&lt;a href=&quot;#在-Visual-Studio-Code-中运行C-项目&quot; class=&quot;headerlink&quot; title=&quot;在 Visual Studio Code 中运行C#项目&quot;&gt;&lt;/a&gt;在 
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="在-Visual-Studio-Code-中运行C-项目"><a href="#在-Visual-Studio-Code-中运行C-项目" class="headerlink" title="在 Visual Studio Code 中运行C#项目"></a>在 Visual Studio Code 中运行C#项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><p>.NET是 Microsoft XML Web services 平台。XML Web services 允许应用程序通过 Internet 进行通讯和共享数据，而不管所采用的是哪种操作系统、设备或编程语言。Microsoft .NET 平台提供创建 XML Web services 并将这些服务集成在一起之所需。对个人用户的好处是无缝的、吸引人的体验。而C#语言则是.Net公司中的一个优秀的面向对象语言。我们可以用轻量级编译器 Visual Studio Code 进行 C# 代码的编译过程。</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>首先我们要进行VSCode的下载安装，傻瓜式安装直接点下一步即可，→<a href="https://code.visualstudio.com/" target="_blank" rel="external">VSCode官网下载</a></p>
<p>然后我们得配置一下.NET的运行环境，安装<a href="https://www.microsoft.com/net/download/core" target="_blank" rel="external">.NET Core SDK</a></p>
<p>然后在我们的VSCode中下载C#插件，下载完重启VScode窗口即可生效。</p>
<p><img src="/images/C.jpg" alt=""></p>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>在VSCode终端输入cd:你创建的项目文件目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//例如</div><div class="line">cd D:\C#</div></pre></td></tr></table></figure>
<p>然后输入: <code>dotnet new -help</code> ,会出现创建新项目命令的提示信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet new --help</div></pre></td></tr></table></figure>
<p>然后创建一个简单的控制台应用程序即为C#项目程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet new console</div></pre></td></tr></table></figure>
<p>在控制台运行创建的控制台程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet run</div></pre></td></tr></table></figure>
<p>最后用VScode打开我们刚才创建的项目目录，软件会自动下载.NET Core Debugger，等待下载安装（安装调式插件）。<br>现在就可以在VScode中运行或者调试C#项目了，新建项目后Program.cs即为C#的源文件。 项目运行命令：<code>dotnet run</code></p>
<p><img src="/images/B.jpg" alt=""></p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2018/09/07/%E5%88%A9%E7%94%A8vscode%E7%BC%96%E5%86%99C-%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode:旋转数组</title>
      <link>http://www.godlikemeteor.com/2018/07/10/LeetCode-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</link>
      <guid>http://www.godlikemeteor.com/2018/07/10/LeetCode-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Tue, 10 Jul 2018 08:31:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;旋转数组&quot;&gt;&lt;a href=&quot;#旋转数组&quot; class=&quot;headerlink&quot; title=&quot;旋转数组&quot;&gt;&lt;/a&gt;旋转数组&lt;/h2&gt;&lt;p&gt;给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。&lt;/p&gt;
&lt;h3 id=&quot;示例1&quot;&gt;&lt;a href=&quot;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><blockquote>
<p>输入: [1,2,3,4,5,6,7] 和 k = 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右旋转 1 步: [7,1,2,3,4,5,6]<br>向右旋转 2 步: [6,7,1,2,3,4,5]<br>向右旋转 3 步: [5,6,7,1,2,3,4]</p>
</blockquote>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><blockquote>
<p>输入: [-1,-100,3,99] 和 k = 2<br>输出: [3,99,-1,-100]<br>解释:<br>向右旋转 1 步: [99,-1,-100,3]<br>向右旋转 2 步: [3,99,-1,-100]</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>要求使用空间复杂度为 O(1) 的原地算法。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用原生JavaScript的简单的数组操作，循环进行入栈出栈操作即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @param &#123;number&#125; k</div><div class="line"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</div><div class="line"> */</div><div class="line">var rotate = function(nums, k) &#123;</div><div class="line">    while(k--)&#123;</div><div class="line">        nums.unshift(nums.pop());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2018/07/10/LeetCode-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LeetCode:买卖股票的最佳时机</title>
      <link>http://www.godlikemeteor.com/2018/07/05/LeetCCode-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <guid>http://www.godlikemeteor.com/2018/07/05/LeetCCode-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <pubDate>Thu, 05 Jul 2018 02:49:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;买卖股票的最佳时机-II&quot;&gt;&lt;a href=&quot;#买卖股票的最佳时机-II&quot; class=&quot;headerlink&quot; title=&quot;买卖股票的最佳时机 II&quot;&gt;&lt;/a&gt;买卖股票的最佳时机 II&lt;/h2&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><blockquote>
<p>输入: [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p>
</blockquote>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><blockquote>
<p>输入: [1,2,3,4,5]<br>输出: 4<br>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
</blockquote>
<h3 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2:"></a>示例2:</h3><blockquote>
<p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们可以发现，这是一道典型的动态规划题，但是由于是基础，所以我们可以用数组进行简单的工作，我们只需要寻找前一天比今天的价值高就买入，后一天比今天价值低就卖出，即可解决该题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;number[]&#125; prices</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line">var maxProfit = function(prices) &#123;</div><div class="line">    var minPrice = prices[0];</div><div class="line">    var sumProfit = 0;</div><div class="line">    for(let i=1;i&lt;prices.length;i++)&#123;</div><div class="line">        if(minPrice&lt;prices[i])&#123;  </div><div class="line">           sumProfit += prices[i] - minPrice;  </div><div class="line">           minPrice = prices[i];  </div><div class="line">        &#125;</div><div class="line">        else&#123;  </div><div class="line">           minPrice = prices[i];  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">    return sumProfit;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2018/07/05/LeetCCode-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
