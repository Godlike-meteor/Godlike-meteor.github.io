<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Godlike Meteor</title>
    <link>http://www.godlikemeteor.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>能被JS改写的终将被JS改写</description>
    <pubDate>Fri, 21 Jul 2017 13:52:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hexo博客搭建攻略（二）：进阶篇【不定时更新】</title>
      <link>http://www.godlikemeteor.com/2017/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9B%E9%98%B6%E7%AF%87/</link>
      <guid>http://www.godlikemeteor.com/2017/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9B%E9%98%B6%E7%AF%87/</guid>
      <pubDate>Thu, 20 Jul 2017 00:38:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hex
      
      </description>
      
      <content:encoded><![CDATA[<p>Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p>
<p>讲完了基础的博客搭建，下面大家也发现默认的主题并不好看，今天我们要讲解的就是有关next主题的优化。<br>首先， <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next使用文档</a>展示了next主题的基本设置和一些集成操作，在这里就不加过多的描述了，今天我要讲的是博客集成的一些功能的实现。</p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<p>在这里我使用的是Mist主题，你也可以挑选自己喜欢的样式。</p>
<p><img src="/images/演示5.jpg" alt=""></p>
<h2 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h2><p>在实现了简单的页面美化之后，我们需要让自己的博客更加与众不同，想不想在阅读文章的时候让读者来一段轻松的音乐呢？</p>
<p>首先，我们可以直接登录网易云音乐，点击生成外链播放器。</p>
<p><img src="/images/演示6.jpg" alt=""></p>
<p>然后将最后生成的html代码复制到你想要复制的地方就可以添加网易云音乐了。</p>
<p><img src="/images/演示7.jpg" alt=""></p>
<p>是不是很棒呢？赶紧get√吧！</p>
<p><img src="/images/演示8.jpg" alt=""></p>
<h2 id="设置网站logo"><a href="#设置网站logo" class="headerlink" title="设置网站logo"></a>设置网站logo</h2><p>其实设置网站logo跟设置头像一样，在配置文件中引入正确的地址就可以了，但是网站logo对图片是有要求的，我们需要在 <a href="http://tool.lu/favicon/" target="_blank" rel="external">Favicon在线制作</a> 工具中制作32*32的.ico图片，然后放在blog/sourse/images下面，在<code>主题配置文件</code>中添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon:images/favicon.ico</div></pre></td></tr></table></figure>
<p>效果如图所示：</p>
<p><img src="/images/演示9.jpg" alt=""></p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9B%E9%98%B6%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo博客搭建攻略（一）：基础篇</title>
      <link>http://www.godlikemeteor.com/2017/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8EHexo-Github%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <guid>http://www.godlikemeteor.com/2017/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8EHexo-Github%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Wed, 19 Jul 2017 10:48:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;相信程序猿们都有开博客的想法，因为一个博客完美的集分享代码、记录笔记和展示自己等功能为一身。今天就自己搭建的博客给大家分享一下如何搭建基于h
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>相信程序猿们都有开博客的想法，因为一个博客完美的集分享代码、记录笔记和展示自己等功能为一身。今天就自己搭建的博客给大家分享一下如何搭建基于hexo + GitHub的博客。</p>
<h2 id="搭建的准备"><a href="#搭建的准备" class="headerlink" title="搭建的准备"></a>搭建的准备</h2><p>Hexo基于Node.js环境，Node.js是一个Javascript运行环境。如果想搭建基于hexo的博客，首先要安装Node.js。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows平台请到<a href="https://nodejs.org/en/" target="_blank" rel="external">node官网</a>下载安装包进行安装。</p>
<p><img src="/images/node.jpg" alt=""></p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>安装好Node.js环境后，就可以通过node来安装Hexo。<br>首先我们在自己的工作目录下，新建一个blog目录，在此目录上我们可以管理自己的博客源代码，进入blog目录，执行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install -g hexo         //安装Hexo</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init                    //初始化Hexo</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install                 //安装依赖包</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g                       //生成静态页面</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s                       //生成本地预览</div></pre></td></tr></table></figure>
<p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，看到以下界面说明Hexo安装成功。</p>
<p><img src="/images/Hexo预览.jpg" alt=""></p>
<h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>目前的一切都只能在本机预览，既然是博客，就需要上传到网络上让人们访问。当然你可以选择购买服务器来搭建自己的博客，但是本教程是教给大家如何免费的使用GitHub进行博客搭建。所以，我们需要登录GitHub官网进行注册，并实现我们的搭建。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>首先登录我们的GitHub，在右上角的加号处新建我们的仓库。</p>
<p><img src="/images/演示1.jpg" alt=""></p>
<p>如下图，填写仓库名称，千万要注意仓库名称的格式，一定要以“你的GitHub账号.github.io”命名，这个仓库就是你以后访问你博客站点的默认域名。</p>
<p><img src="/images/演示2.jpg" alt=""></p>
<p>创建成功后，接下来就需要配置SSH-key。</p>
<h2 id="部署公匙"><a href="#部署公匙" class="headerlink" title="部署公匙"></a>部署公匙</h2><p>Hexo部署时，采用git协议，为避免暴露账户密码，最好使用证书认证，所以我们需要在Github部署公钥。</p>
<p>进入账号的<code>Personal setting</code>页面，选择<code>SSH and GPG keys</code>，进入密钥配置页面。填入本机公钥，点击<code>Add SSH key</code>，如下图</p>
<p><img src="/images/演示3.jpg" alt=""></p>
<p>输入以下指令，测试密钥连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果返回<code>Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则说明公钥部署成功。特别提醒，请注意保护本机私钥的安全。</p>
<p>如果本机还没有SSH密钥，请点击下方详细链接，这里就不做介绍了。</p>
<p>步骤请点击 <a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">window下配置SSH连接GitHub、GitHub配置ssh key</a></p>
<h2 id="将blog部署到-GitHub-pages-上"><a href="#将blog部署到-GitHub-pages-上" class="headerlink" title="将blog部署到 GitHub pages 上"></a>将blog部署到 GitHub pages 上</h2><h3 id="配置deploy"><a href="#配置deploy" class="headerlink" title="配置deploy"></a>配置deploy</h3><p>找到blog目录下的配置文件_config.yml【为了方便辨析，下文统一称之为站点配置文件】,用编辑器打开此文件，找到此文件中的deploy字段，按照以下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>注意：将yourname改成你自己的GitHub名字！</p>
<h3 id="设置git身份信息"><a href="#设置git身份信息" class="headerlink" title="设置git身份信息"></a>设置git身份信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"你的用户名"</span></div><div class="line">git config --global user.email <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure>
<p>然后执行以下指令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>执行以下指令进行部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>浏览器打开 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> 就可以看到刚才本地预览页面,做到这里，恭喜你已经成功将自己的博客传到网站上了。</p>
<h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><p>尽管到这里你已经可以通过 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> 来访问自己的博客，但是我想大家也会觉得这种名字很土，想不想加上自己喜欢的域名，特别是.com等解析度很高的域名呢？</p>
<p>先去买一个域名，什么后缀的都可以，在这里博主推荐购买腾讯云的域名，最近腾讯云有云+校园计划，可以每月花1元钱租一台云服务器，还可以领25块钱的域名优惠券，点击这里哦！<a href="https://www.qcloud.com/act/campus" target="_blank" rel="external">腾讯云+校园计划</a></p>
<p>进域名控制台，在解析里面添加一条CNAME记录，指向<code>yourname.github.io.</code>即可【注意，最后有个点】，具体请看如图配置。</p>
<p><img src="/images/演示4.jpg" alt=""></p>
<p>到blog/source目录下创建CNAME文件，添加你要绑定的域名保存。</p>
<p>然后执行部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>不出意外，这时用自己的域名就可以访问自己的博客站点，如果出错，极可能是DNS数据还没更新，请稍等一段时间再试，DNS数据同步更新一般不会超过48小时。</p>
<h2 id="Hexo-基本操作"><a href="#Hexo-基本操作" class="headerlink" title="Hexo 基本操作"></a>Hexo 基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new<span class="string">"postName"</span> <span class="comment">#新建文章</span></div><div class="line">hexo new page<span class="string">"pageName"</span> <span class="comment">#新建页面</span></div><div class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="comment">#将.deploy目录部署到指定空间</span></div><div class="line">hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></div><div class="line">hexo version <span class="comment">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<p>通过这些操作你就能通过git bush来上传你博客的内容了，是不是很简单呢？<br>接下来我还会推出有关next主题的配置和美化的博客，谢谢大家。</p>
<p>部分资料参考 <a href="http://carryguan.me/2016/07/02/hexo-gihubpages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">carry学姐的布置篇</a>，也是我的启蒙篇，感谢学姐！</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E4%BA%8EHexo-Github%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript文件夹模拟【代码笔记】</title>
      <link>http://www.godlikemeteor.com/2017/07/18/JavaScript%E6%96%87%E4%BB%B6%E5%A4%B9%E6%A8%A1%E6%8B%9F%E3%80%90%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0%E3%80%91/</link>
      <guid>http://www.godlikemeteor.com/2017/07/18/JavaScript%E6%96%87%E4%BB%B6%E5%A4%B9%E6%A8%A1%E6%8B%9F%E3%80%90%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0%E3%80%91/</guid>
      <pubDate>Tue, 18 Jul 2017 11:36:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;这是这次大实验的编码实现，由于匆忙来不及做可视化。尽管如此我会抽出时间进行可视化的操作。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
      
      </description>
      
      <content:encoded><![CDATA[<p>这是这次大实验的编码实现，由于匆忙来不及做可视化。尽管如此我会抽出时间进行可视化的操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element,child,parent,brother)&#123;</div><div class="line">    this.data = element;</div><div class="line">    this.child = child;</div><div class="line">    this.parent = parent;</div><div class="line">    this.brother = brother;</div><div class="line">    this.show = show;</div><div class="line">    this.flog = 0;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.data;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BST</span></span>()&#123;</div><div class="line">    this.root = new Node(<span class="string">'我的电脑'</span>,null,null,null);</div><div class="line">    this.insert = insert;</div><div class="line">    this.remove = remove;</div><div class="line">    this.find = find;</div><div class="line">    this.clearFind = clearFind;</div><div class="line">    this.stick = stick;</div><div class="line">    this.rename = rename;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> find(element)&#123;</div><div class="line">    var root = this.root;</div><div class="line">    <span class="keyword">if</span>(root.child == null)&#123;</div><div class="line">        console.log(<span class="string">"本机无文件夹，无法查找你所需要的文件夹！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var currout = root; </div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>((currout.child != null)&amp;&amp;(currout.child.flog != 1))&#123;</div><div class="line">                currout.flog = 1;</div><div class="line">                currout = currout.child;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(currout.data == element)&#123;</div><div class="line">                    console.log(<span class="string">"查找成功！节点为："</span> + currout);</div><div class="line">                    <span class="built_in">return</span> currout;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.flog = 1;</div><div class="line">                    <span class="keyword">if</span>(currout == this.root)&#123;</div><div class="line">                        console.log(<span class="string">"本机没有你想要查找的文件夹，请确定输入文件夹名称正确！"</span>);</div><div class="line">                        <span class="built_in">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                            currout = currout.brother;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span>&#123;</div><div class="line">                            currout = currout.parent;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">clearFind</span></span>()&#123;</div><div class="line">    var root = this.root;</div><div class="line">    <span class="keyword">if</span>(root.child == null)&#123;</div><div class="line">        console.log(<span class="string">"本机无文件夹,无法清除文件夹标记！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var currout = root; </div><div class="line">        var count = 0;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>((currout.child != null)&amp;&amp;((count != 1)||(currout.child.flog == 1)))&#123;</div><div class="line">                currout = currout.child;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                count = 1;</div><div class="line">                <span class="keyword">if</span>(currout == this.root)&#123;</div><div class="line">                    console.log(<span class="string">"清除成功！"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.flog = 0;</div><div class="line">                    <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                        currout = currout.brother;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        currout = currout.parent;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> insert(parentNodeElement,element)&#123;</div><div class="line">    var newNode = new Node(element,null,null,null);</div><div class="line">    var parent = this.find(parentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    <span class="keyword">if</span>(parent.child == null)&#123;</div><div class="line">        parent.child = newNode;</div><div class="line">        newNode.parent = parent;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        newNode.brother = parent.child;</div><div class="line">        parent.child = newNode;</div><div class="line">        newNode.parent = parent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(parentNodeElement,element)&#123;</div><div class="line">    var parent = this.find(parentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var currout = parent.child;</div><div class="line">    var Brother;</div><div class="line">    <span class="keyword">while</span>(1)&#123;</div><div class="line">        <span class="keyword">if</span>(parent.child.data == element)&#123;</div><div class="line">            parent.child = parent.child.brother;</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            Brother = currout;</div><div class="line">            currout = currout.brother;</div><div class="line">            <span class="keyword">if</span>(currout.data == element)&#123;</div><div class="line">                Brother.brother = currout.brother;</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> stick(oldParentNodeElement,newParentNodeElement,element)&#123;</div><div class="line">    var oldold = this.find(oldParentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var newnew = this.find(newParentNodeElement);</div><div class="line">    this.clearFind();</div><div class="line">    var findNode = this.find(element);</div><div class="line">    this.clearFind();</div><div class="line">    <span class="keyword">if</span>((oldold.child == findNode)&amp;&amp;(findNode.brother == null))&#123;</div><div class="line">        findNode.brother = newnew.child;</div><div class="line">        newnew.child = findNode;</div><div class="line">        findNode.parent = newnew;</div><div class="line">        oldold.child = null;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((oldold.child == findNode)&amp;&amp;(findNode.brother != null))&#123;</div><div class="line">        <span class="keyword">if</span>(newnew.child == null)&#123;</div><div class="line">            newnew.child = findNode;</div><div class="line">            oldold.child = findNode.brother;</div><div class="line">            findNode.brother = null;</div><div class="line">            findNode.parent = newnew;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var currout = oldold.child;</div><div class="line">            <span class="keyword">while</span>(1)&#123;</div><div class="line">                <span class="keyword">if</span>(currout.brother != null)&#123;</div><div class="line">                    currout = currout.brother;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    currout.brother = findNode;</div><div class="line">                    oldold.child = findNode.brother;</div><div class="line">                    findNode.brother = null;</div><div class="line">                    findNode.parent = newnew;</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((oldold.child != findNode))&#123;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            var currout1 = oldold.child;</div><div class="line">            var father = null;</div><div class="line">            <span class="keyword">if</span>(currout1.brother != findNode)&#123;</div><div class="line">                father = currout1;</div><div class="line">                currout1 = currout1.brother;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                father.brother = findNode.brother;</div><div class="line">                findNode.brother = newnew.child;</div><div class="line">                newnew.child = findNode;</div><div class="line">                findNode.parent = newnew;</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> remove(element,newElement)&#123;</div><div class="line">    var oldold = this.find(element);</div><div class="line">    this.clearFind();</div><div class="line">    oldold.data = newElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/18/JavaScript%E6%96%87%E4%BB%B6%E5%A4%B9%E6%A8%A1%E6%8B%9F%E3%80%90%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0%E3%80%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript 树</title>
      <link>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/</link>
      <guid>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/</guid>
      <pubDate>Mon, 17 Jul 2017 00:18:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;树的定义&quot;&gt;&lt;a href=&quot;#树的定义&quot; class=&quot;headerlink&quot; title=&quot;树的定义&quot;&gt;&lt;/a&gt;树的定义&lt;/h2&gt;&lt;p&gt;在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br>1.每个节点有零个或多个子节点；<br>2.没有父节点的节点称为根节点；<br>3.每一个非根节点有且只有一个父节点；<br>4.除了根节点外，每个子节点可以分为多个不相交的子树。</p>
<h2 id="JavaScript树的结构"><a href="#JavaScript树的结构" class="headerlink" title="JavaScript树的结构"></a>JavaScript树的结构</h2><p>今天我们要讲的是排序二叉树的JavaScript实现，首先，排序二叉树的节点跟我们双向链表的节点很像，都有两个指针，不同的是，它的指针指向的是它的左孩子和右孩子，具体实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Node(element,leftChild,rightChild)&#123;     //传入节点的值，左右指针</div><div class="line">    this.data = element;</div><div class="line">    this.leftChild = leftChild;</div><div class="line">    this.rightChild = rightChild;</div><div class="line">    this.show = show;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">show</span></span>()&#123;                                  //显示节点的值</div><div class="line">    <span class="built_in">return</span> this.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们就要实现树这种数据结构了，每次我们要新建一个树都需要新建一个根节点让其指向<code>null</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BST</span></span>()&#123;</div><div class="line">    this.root = null;</div><div class="line">    this.insert = insert;             //插入节点</div><div class="line">    this.maxValue = maxValue;         //寻找树中的最大值</div><div class="line">    this.minValue = minValue;         //寻找树中的最小值</div><div class="line">    this.find = find;                 //寻找树中的某个值</div><div class="line">    this.preOrder = preOrder;         //前序遍历</div><div class="line">    this.inOrder = inOrder;           //中序遍历</div><div class="line">    this.postOrder = postOrder;       //后序遍历</div><div class="line">    this.remove = remove;             //删除某个节点</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们要实现的就是树的节点的插入，这需要我们调用<code>insert()</code>函数了。</p>
<h3 id="节点的插入"><a href="#节点的插入" class="headerlink" title="节点的插入"></a>节点的插入</h3><p>节点的插入方法有两种，一种是递归方法插入节点，另外一种是非递归的方法插入节点，这里我采用的是非递归的方法，尽管对内存占用比较大，但是有助于新手的理解，插入的时候要判定树中是否有节点，没有的话直接变成根节点；如果有节点，循环查找，若比节点小往左走，比节点大往右走，直到往左走遇到空或者往右走遇到空直接插入节点即可，具体编码实现如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//插入</div><div class="line"><span class="keyword">function</span> insert(element)&#123;</div><div class="line">    var node = new Node(element,null,null);</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        this.root = node;                 //让节点变成根节点</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;            //记录根节点的位置</div><div class="line">        var parents;                     //记录你找的节点的父节点的位置</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            parents = copy;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;     //如果小就往左走</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.leftChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                copy = copy.rightChild;   //如果大就往右走</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    parents.rightChild = node;</div><div class="line">                    console.log(parents);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是简单的非递归调用了，接下来我们来试试查找一下我们的树中的节点。</p>
<h3 id="节点的查找"><a href="#节点的查找" class="headerlink" title="节点的查找"></a>节点的查找</h3><p>节点的查找分为三类：查找树中的最大值，查找树中的最小值，查找树中的某个值。查找的思路很简单，查找树中的某个值就跟插入函数很像，只不过插入函数找到某个节点后插入，而查找只需要返回就行了。查找树中的最大值也很简单，一直找根节点的<code>rightChild</code>直到为空，即为最大值，最小值同理，具体代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">//查找最大值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">maxValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.rightChild != null)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找最小值</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">minValue</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取最大值。"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(copy.leftChild != null)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                console.log(copy.show());</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//查找某个值，返回节点</div><div class="line"><span class="keyword">function</span> find(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无法获取节点。"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                console.log(copy);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写的比较麻烦使让每一步尽可能的清晰，相对于递归调用跟容易理解问题。接下来就轮到我们的遍历问题了。</p>
<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="什么是树的遍历"><a href="#什么是树的遍历" class="headerlink" title="什么是树的遍历"></a>什么是树的遍历</h3><p>在计算机科学里，树的遍历（也称为树的搜索）是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有节点的过程。具体的访问操作可能是检查节点的值、更新节点的值等。不同的遍历方式，其访问节点的顺序是不一样的。以下虽然描述的是二叉树的遍历算法，但它们也适用于其他树形结构。</p>
<h3 id="遍历的种类"><a href="#遍历的种类" class="headerlink" title="遍历的种类"></a>遍历的种类</h3><p>与那些基本上都有标准遍历方式（通常是按线性顺序）的线性数据结构（如链表、一维数组）所不同的是，树结构有多种不同的遍历方式。从二叉树的根节点出发，节点的遍历分为三个主要步骤：对当前节点进行操作（称为“访问”节点）、遍历左边子节点、遍历右边子节点。这三个步骤的先后顺序也是不同遍历方式的根本区别。</p>
<p>由于从给定的某个节点出发，有多个可以前往的下一个节点（树不是线性数据结构），所以在顺序计算（即非并行计算）的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO)或队列（FIFO）。由于树本身是一种自我引用（即递归定义）的数据结构，因此很自然也可以用递归方式，或者更准确地说，用corecursion，来实现延迟节点的保存。这时（采用递归的情况）这些节点被保存在call stack中。</p>
<p>遍历方式的命名，源于其访问节点的顺序。最简单的划分：是深度优先（先访问子节点，再访问父节点，最后是第二个子节点）？还是广度优先（先访问第一个子节点，再访问第二个子节点，最后访问父节点）？ 深度优先可进一步按照根节点相对于左右子节点的访问先后来划分。如果把左节点和右节点的位置固定不动，那么根节点放在左节点的左边，称为前序（pre-order）、根节点放在左节点和右节点的中间，称为中序（in-order）、根节点放在右节点的右边，称为后序（post-order）。对广度优先而言，遍历没有前序中序后序之分：给定一组已排序的子节点，其“广度优先”的遍历只有一种唯一的结果。</p>
<h3 id="JavaScript实现树的遍历"><a href="#JavaScript实现树的遍历" class="headerlink" title="JavaScript实现树的遍历"></a>JavaScript实现树的遍历</h3><p>根据上面的结构设计，我们要实现树的前序遍历，中序遍历和后序遍历。这里我们用递归实现，非常简单，只需要四行代码即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//前序排序</div><div class="line"><span class="keyword">function</span> preOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        console.log(node.show());        //根</div><div class="line">        preOrder(node.leftChild);        //左子树</div><div class="line">        preOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//中序排序</div><div class="line"><span class="keyword">function</span> inOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        inOrder(node.leftChild);        //左子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">        inOrder(node.rightChild);       //右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//后序排序</div><div class="line"><span class="keyword">function</span> postOrder(node)&#123;</div><div class="line">    <span class="keyword">if</span>(node != null)&#123;</div><div class="line">        postOrder(node.leftChild);      //左子树</div><div class="line">        postOrder(node.rightChild);     //右子树</div><div class="line">        console.log(node.show());       //根</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="树节点的删除"><a href="#树节点的删除" class="headerlink" title="树节点的删除"></a>树节点的删除</h2><h3 id="删除的算法"><a href="#删除的算法" class="headerlink" title="删除的算法"></a>删除的算法</h3><p>接下来就是最考验脑力的删除操作了，因为在删除的过程中，你要考虑到不同的情况，针对每一种不同的情况，你要有针对性的反应和调整。树的删除具体分为五种情况和三个步骤：</p>
<p>1）判断参数的合法性，判断参数是否在当前的二叉树当中<br>2）删除的节点是根节点，此时应该怎么调整<br>3）删除的节点是普通节点，此时又应该怎么调整</p>
<p>情况一：删除的节点是根节点【即步骤二】<br>情况二：删除的节点是叶子节点<br>情况三：删除的节点只有左孩子没有右孩子<br>情况四：删除的节点只有右孩子没有左孩子<br>情况五：删除的节点既有左孩子也有右孩子</p>
<p>下面直接贴代码进行讲解：【为了更清晰的展示五种情况，将根单独列出来】</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> remove(element)&#123;</div><div class="line">    <span class="keyword">if</span>(this.root == null)&#123;</div><div class="line">        console.log(<span class="string">"此树中无节点！无需删除节点。"</span>)                        //如果树为空，</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        var copy = this.root;                                            //删除节点的寻找</div><div class="line">        var parents;</div><div class="line">        var findNode;</div><div class="line">        <span class="keyword">while</span>(1)&#123;</div><div class="line">            <span class="keyword">if</span>(element &lt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.leftChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; copy.data)&#123;</div><div class="line">                parents = copy;</div><div class="line">                copy = copy.rightChild;</div><div class="line">                <span class="keyword">if</span>(copy == null)&#123;</div><div class="line">                    console.log(<span class="string">"此树中无此节点！请检查数值是否正确。"</span>);</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(element == copy.data)&#123;</div><div class="line">                findNode = copy;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(findNode == this.root)&#123;                                  //删除节点为根节点判断四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                findNode = null;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                findNode.data = findNode.rightChild.data;</div><div class="line">                findNode.rightChild = findNode.rightChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.rightChild.leftChild; </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                findNode.data = findNode.leftChild.data;</div><div class="line">                findNode.rightChild = findNode.leftChild.rightChild;</div><div class="line">                findNode.leftChild = findNode.leftChild.leftChild;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var code = findNode.leftChild;</div><div class="line">                var studio;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(code.rightChild != null)&#123;</div><div class="line">                        studio = code;</div><div class="line">                        code = code.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    findNode.leftChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = code.data;</div><div class="line">                    studio.rightChild = code.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;                                                        // 不是根节点的四种情况</div><div class="line">            <span class="keyword">if</span>((findNode.leftChild == null) &amp;&amp; (findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = null;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = null;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild == null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.rightChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild == null))&#123;</div><div class="line">                <span class="keyword">if</span>(findNode.data &gt; parents.data)&#123;</div><div class="line">                    parents.rightChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    parents.leftChild = findNode.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((findNode.leftChild != null)&amp;&amp;(findNode.rightChild != null))&#123;</div><div class="line">                var Chrome = findNode.leftChild;</div><div class="line">                var Google;</div><div class="line">                <span class="keyword">while</span>(1)&#123;</div><div class="line">                    <span class="keyword">if</span>(Chrome.rightChild != null)&#123;</div><div class="line">                        Google = Chrome;</div><div class="line">                        Chrome = Chrome.rightChild;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span>&#123;</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(Chrome==findNode.leftChild)&#123;</div><div class="line">                    findNode.data = Chrome.data;         //千万要记住只有一个左孩子的情况，我就错在这里了，报错的是rightChild undefined</div><div class="line">                    findNode.leftChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    findNode.data = Chrome.data;</div><div class="line">                    Google.rightChild = Chrome.leftChild;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天的资料就分享到这里，接下来我还会持续更新所学的。谢谢大家。</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/17/JavaScript-%E6%A0%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用JavaScript实现中缀表达式计算器【1.0】</title>
      <link>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</link>
      <guid>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</guid>
      <pubDate>Sun, 16 Jul 2017 12:16:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;学习了栈结构，你以为学完了栈？今天要讲的是中缀表达式转后缀表达式，后缀表达式的计算和中缀表达式的计算，接下来让我们开始吧！&lt;/p&gt;
&lt;h2 id=&quot;什么是中缀表达式和后缀表达式？&quot;&gt;&lt;a href=&quot;#什么是中缀表达式和后缀表达式？&quot; class=&quot;headerlink&quot; 
      
      </description>
      
      <content:encoded><![CDATA[<p>学习了栈结构，你以为学完了栈？今天要讲的是中缀表达式转后缀表达式，后缀表达式的计算和中缀表达式的计算，接下来让我们开始吧！</p>
<h2 id="什么是中缀表达式和后缀表达式？"><a href="#什么是中缀表达式和后缀表达式？" class="headerlink" title="什么是中缀表达式和后缀表达式？"></a>什么是中缀表达式和后缀表达式？</h2><p>中缀表示法（或中缀记法）是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4）。与前缀表达式（例：+ 3 4）或后缀表达式（例：3 4 +）相比，中缀表达式不容易被电脑解析，但仍被许多程序语言使用，因为它符合人们的普遍用法。<br>与前缀或后缀记法不同的是，中缀记法中括号是必需的。计算过程中必须用括号将操作符和对应的操作数括起来，用于指示运算的次序。</p>
<p>后缀表示法 (逆波兰表示法)（Reverse Polish notation，RPN，或逆波兰记法），是一种是由波兰数学家扬·武卡谢维奇1920年引入的数学表达式方式，在逆波兰记法中，所有操作符置于操作数的后面，因此也被称为后缀表示法。逆波兰记法不需要括号来标识操作符的优先级。</p>
<p>逆波兰记法中，操作符置于操作数的后面。例如表达“三加四”时，写作“3 4 +”，而不是“3 + 4”。如果有多个操作符，操作符置于第二个操作数的后面，所以常规中缀记法的“3 - 4 + 5”在逆波兰记法中写作“3 4 - 5 +”：先3减去4，再加上5。使用逆波兰记法的一个好处是不需要使用括号。例如中缀记法中“3 - 4 <em> 5”与“（3 - 4）</em>5”不相同，但后缀记法中前者写做“3 4 5 <em> -”，无歧义地表示“3 (4 5 </em>) -”；后者写做“3 4 - 5 *”。<br>逆波兰表达式的解释器一般是基于堆栈的。解释过程一般是：操作数入栈；遇到操作符时，操作数出栈，求值，将结果入栈；当一遍后，栈顶就是表达式的值。因此逆波兰表达式的求值使用堆栈结构很容易实现，并且能很快求值。</p>
<p>首先我们要进行的就是中缀表达式和后缀表达式的转换。开始吧！</p>
<h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><p>首先让我们来了解一下有关中缀转后缀的算法，大概有以下几个规则：<br>(1)当读到数字直接送至输出队列中；<br>(2)当读到运算符t时：<br>    a.将栈中所有优先级高于或等于t的运算符弹出，送到输出队列中；<br>　  b.t进栈；<br>(3)读到左括号时总是将它压入栈中；<br>(4)读到右括号时，将靠近栈顶的第一个左括号上面的运算符全部依次弹出，送至输出队列后，再丢弃左括号；<br>(5)中缀表达式全部读完后，若栈中仍有运算符，将其送到输出队列中。 </p>
<h3 id="符号的优先级"><a href="#符号的优先级" class="headerlink" title="符号的优先级"></a>符号的优先级</h3><p>首先我们必须知道有关运算符优先级的问题，经过查阅，我们可以得到如下二维数组。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var sign = new Array();</div><div class="line">                    // +   -   *    /    (    )   <span class="comment">#</span></div><div class="line">sign[0] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //+</div><div class="line">sign[1] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);   //-</div><div class="line">sign[2] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     //*</div><div class="line">sign[3] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'-1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);     ///</div><div class="line">sign[4] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'0'</span>,<span class="string">''</span>);  //(</div><div class="line">sign[5] = new Array(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">''</span>,<span class="string">'1'</span>,<span class="string">'1'</span>);       //)</div><div class="line">sign[6] = new Array(<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">'-1'</span>,<span class="string">''</span>,<span class="string">'0'</span>);  //<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>先找横行，代表栈中的运算符，再找纵行，代表你想要比较的运算符，<code>1</code>代表栈中符号优先级小于栈外符号优先级，栈外符号入栈；<code>-1</code>代表栈中符号优先级大于栈外符号优先级，栈中符号弹出，直到栈中符号优先级比栈外符号小，栈外符号入栈；<code>0</code>代表优先级一样，暂时不进行考虑。</p>
<h3 id="符号的比较函数"><a href="#符号的比较函数" class="headerlink" title="符号的比较函数"></a>符号的比较函数</h3><p>弄清楚符号的优先级，我们就可以对两个符号进行比较，具体实现代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Sign(a,b)&#123;</div><div class="line">    var str = [<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'#'</span>];</div><div class="line">    var str1;</div><div class="line">    var str2;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;7;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a == str[i])&#123;</div><div class="line">            str1 = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(b == str[i])&#123;</div><div class="line">            str2 = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var count = sign[str1][str2];</div><div class="line">    <span class="built_in">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将符号关系转换为数字更有利于我们之后的判断，接下来就是我们的正题来了。</p>
<h3 id="构造一个栈"><a href="#构造一个栈" class="headerlink" title="构造一个栈"></a>构造一个栈</h3><p>跟上一篇一样，我们需要构造一个基本的数据结构—-栈，来实现这个项目，不同的是，我们新增加了一个函数<code>peek()</code>来获取栈顶的第一个元素。下面是代码实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Stack</span></span>()&#123;</div><div class="line">    this.dataStore = [];</div><div class="line">    this.top = 0;</div><div class="line">    this.push = push;</div><div class="line">    this.pop = pop;</div><div class="line">    this.length = length;</div><div class="line">    this.peek = peek;</div><div class="line">    this.clear = clear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> push(element)&#123;</div><div class="line">    this.dataStore[this.top] = element;</div><div class="line">    this.top++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">pop</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[--this.top];;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">peek</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.dataStore[this.top-1];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">clear</span></span>()&#123;</div><div class="line">    this.top = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">length</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> this.top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造好一个栈之后，我们就需要进行最重要的步骤了，构造转换函数。</p>
<h3 id="中缀表达式转换函数"><a href="#中缀表达式转换函数" class="headerlink" title="中缀表达式转换函数"></a>中缀表达式转换函数</h3><p>中缀表达式转后缀表达式跟C语言不同，JavaScript是一种弱类型语言，它的实现更加的灵活，首先我们在栈中先压入<code>#</code>，令最后一个元素能够弹出，然后我们构造如下函数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Change(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();                       //构造一个栈</div><div class="line">    stack.push(<span class="string">"#"</span>);                               //将<span class="comment">#压入栈中</span></div><div class="line">    var outStack = new Array();                    //构造一个队列</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;       //如果是数字或者小数点进入循环</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));    //将整个字符串转换成小数数值后入队</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;              //遇到左括号直接入栈</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;         //遇到右括号将栈中左括号之前的符号全部弹出入队，然后删去左括号</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;</div><div class="line">                    outStack.push(stack.pop());</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;                            //两个符号判断关系，选择入队或弹出操作</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        outStack.push(stack.pop());</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就可以输入中缀表达式进行计算了，注意在控制台计算的时候在中缀表达式的后面加一个#号，防止栈内符号未完全弹出的情况出现。</p>
<p>测试实例：<code>Change(&#39;1+2*(3-1+2)-3#&#39;);</code><br>示例输出：<code>1231-2+*+3-</code> 注意，输出的是一个队，也就是一个数组，本样例是为了方便这样测试的。</p>
<h2 id="后缀表达式的计算"><a href="#后缀表达式的计算" class="headerlink" title="后缀表达式的计算"></a>后缀表达式的计算</h2><p>相对于中缀表达式转后缀表达式，后缀表达式的计算就简单多了，直接上代码，在注释中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">ffunction suffix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var outStack = new Stack();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);                 //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var str1 = parseFloat(outStack.pop());     //遇到符号将栈顶的两个数字弹出</div><div class="line">            var str2 = parseFloat(outStack.pop());     //后弹出的在前，先弹出的在后进行运算</div><div class="line">            switch(str[i])&#123;</div><div class="line">                <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(str2 + str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(str2 - str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(str2 * str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">                <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(str2 / str1);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.peek());         //直到栈中只有一个数字，显示即可，就是本次的运算结果</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试实例：<code>suffix(&#39;1231-2+*+3-&#39;)</code><br>示例输出：<code>6</code><br>注意后缀表达式的计算无需将符号入栈，只需要弹出数字进行运算即可。</p>
<h2 id="中缀表达式的计算"><a href="#中缀表达式的计算" class="headerlink" title="中缀表达式的计算"></a>中缀表达式的计算</h2><p>中缀表达式的计算原理如果你理解了中缀转后缀、后缀运算那么很快你就能够理解，这个例子也是直接在代码中进行讲解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Infix(item)&#123;</div><div class="line">    var str = item;</div><div class="line">    var stack = new Stack();</div><div class="line">    stack.push(<span class="string">"#"</span>);                       //将<span class="comment">#字压入栈</span></div><div class="line">    var outStack = new Array();</div><div class="line">    var small = <span class="string">""</span>;</div><div class="line">    var flog = 0;</div><div class="line">    <span class="keyword">for</span>(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(!isNaN(str[i]) || str[i] == <span class="string">'.'</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!isNaN(str[i+1]) || str[i+1] == <span class="string">'.'</span> || flog == 1)&#123;</div><div class="line">                small = small + str[i];</div><div class="line">                flog = 1;</div><div class="line">                <span class="keyword">if</span>(isNaN(str[i+1]) &amp;&amp; str[i+1] != <span class="string">'.'</span>)&#123;</div><div class="line">                    outStack.push(parseFloat(small));</div><div class="line">                    small = <span class="string">""</span>;</div><div class="line">                    flog = 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                outStack.push(str[i]);   //数字直接入栈</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var txt = stack.peek();</div><div class="line">            <span class="keyword">if</span>( str[i] == <span class="string">'('</span>)&#123;</div><div class="line">                stack.push(str[i]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( str[i] == <span class="string">')'</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(var j = i + 1 ; stack.peek() != <span class="string">"("</span> ; j--)&#123;  //符号判断完不进行入栈操作，而是进行弹出运算</div><div class="line">                    var a1 = parseFloat(outStack.pop());</div><div class="line">                    var a2 = parseFloat(outStack.pop());</div><div class="line">                    var a3 = stack.pop();</div><div class="line">                    switch(a3)&#123;</div><div class="line">                        <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(a2 + a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(a2 - a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(a2 * a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                        <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(a2 / a1);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                stack.pop();                     </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                var relationship = Sign(txt,str[i]);</div><div class="line">                <span class="keyword">if</span>( relationship == -1)&#123;</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(relationship &gt;= 0)&#123;</div><div class="line">                    <span class="keyword">do</span>&#123;</div><div class="line">                        var b1 = parseFloat(outStack.pop());</div><div class="line">                        var b2 = parseFloat(outStack.pop());</div><div class="line">                        var a3 = stack.pop();</div><div class="line">                        switch(a3)&#123;</div><div class="line">                            <span class="keyword">case</span><span class="string">'+'</span>:outStack.push(b2 + b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'-'</span>:outStack.push(b2 - b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'*'</span>:outStack.push(b2 * b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                            <span class="keyword">case</span><span class="string">'/'</span>:outStack.push(b2 / b1);</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">while</span>(Sign(stack.peek(),str[i])&gt;0);</div><div class="line">                    stack.push(str[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(outStack.pop().toFixed(5));   //将小数位数控制在5位小数，结束运算。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本代码可以自行尝试输出和输入，根据这个原理以及少许html和CSS的基础就能够写出相当不错的计算器<br>计算器的实现：<a href="http://htmlpreview.github.io/?https://github.com/Godlike-meteor/-Infix-calculator/blob/master/%E7%A5%9E%E5%A5%87%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8.html" target="_blank" rel="external">神奇的计算器</a></p>
<p>今天的代码就到这里，谢谢大家！</p>
]]></content:encoded>
      
      <comments>http://www.godlikemeteor.com/2017/07/16/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
